<%
var today = new Date();
var dd = String(today.getDate()).padStart(2, '0');
var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
var yyyy = today.getFullYear();

today = mm + '/' + dd + '/' + yyyy;
let romScale = [
                      {name:"knee",range:150},
                      {name:"shoulder",range:360},
                      {name:"ankle",range:80},
                      {name:"wrist",range:160},
                      {name:"elbow",range:305},
                      {name:"hip",range:240},
                      {name:"forearm",range:100},
                      {name:"spine",range:100}
                    ]

let emg_normative = {
                "wrist_flex":106,
                "wrist_ext":369,
                "elbow_flex":350,
                "elbow_ext":237,
                "shoulder_flex":862,
                "shoulder_ext":213,
                "shoulder_abduction":1088, 
                "shoulder_adduction":284,
                "forearm_pronation":139, 
                "forearm_supination":69,
                'hip_flex':9,
                "hip_ext":9,
                "hip_adduction":116,
                "hip_abduction":9,
                'knee_flex':147,
                'knee_ext':101,
                'ankle_plantarflex':92,
                'ankle_dorsiflex':349,
                'ankle_inversion':157,
                'ankle_eversion':202,
                'thoracic_flex':121,
                'thoracic_lateralflex':75,
                'thoracic_ext':100,
                'thoracic_rot':176,
                'lumbar_flex':314,
                'lumbar_lateralflex':88,
                'lumbar_ext':66,
                'lumbar_rot':93,
                'abdomen_flex':180,
                'abdomen_rot':112,
                'abdomen_lateralflex':111,
}
var romScale1 = {"kneeflexion":140,"kneeextension":140,"shoulderextension":45,"shoulderflexion":180,"shoulderabduction":180,"shoulderadduction":180,"shoulderlateral rotation":90,"shouldermedial rotation":70,"shoulderelevation":40,"shoulderdepression":10,"ankleinversion":40,"ankleeversion":20,"ankleplantarflexion":45,"ankledorsiflexion":20,"wristflexion":80,"wristextension":70,"wristulnar deviation":45,"wristradial deviation":20,"elbowflexion":145,"elbowextension":145,"hipflexion":125,"hipextension":10,"hipabduction":45,"hipadduction":10,"hiplateral rotation":45,"hipmedial rotation":45,"forearmpronation":90,"forearmsupination":90,"spineflexion":75,"spineextension":30,"spinelateral flexion":35,"spinerotation":30,"abdomenflexion":75,"abdomenextension":30,"abdomenlateral flexion":35,"abdomenrotation":30,"lumbarflexion":75,"lumbarextension":30,"lumbarlateral flexion":35,"lumbarrotation":30,"thoracicflexion":75,"thoracicextension":30,"thoraciclateral flexion":35,"thoracicrotation":30,"elbowlateral rotation":90,"elbowmedial rotation":70};

    var left=0
    var right=0;

      function getSessionStatus(bodyPart , trueValue)
      {
        if( trueValue < bodyPart.range*0.333)
        {
          return "Bad" // red
        }if( trueValue > bodyPart.range*0.666) return "Good" // greenb

        return "Average"
        // blue
      }

      function getTrueRange(maxangle,minangle)
      {
        return parseInt(maxangle)-parseInt(minangle);
      }

      function getSessionStatusInt(value)
      {
        if(value==0){
          return "Good" // green
        }
        else if(value==1){
          return "Average"
          // blue
        }
        else{
          return "Bad" // red
        }
      }
  
  function get_name(name)
  {
    result = name.substr(0,1).toUpperCase() + name.substr(1,name.length);
    
    while(result.substr(result.length-1,result.length) == " ")
    {
      result = result.substr(0,result.length-1);
    }
    
    return result;
  }
  
  function getTotalSessionTime()
  {
        let temp = 0;
        report[0].sessiondetails.map((e,i)=>{
           let min = parseInt(e.sessiontime.substring(0,2));
           let sec = parseInt(e.sessiontime.substring(5,7));
           let totalseconds  = (min*60)+sec;
           temp+=totalseconds;
        });

        var h = Math.floor(temp / 3600);
        var m = Math.floor(temp % 3600 / 60);
        var s = Math.floor(temp % 3600 % 60);
        var hDisplay = h > 0 ? h + (h == 1 ? "h" : " h:") : "";
        var mDisplay = m > 0 ? m + (m == 1 ? "m:" : "m:") : "00m: ";
        var sDisplay = s > 0 ? s + (s == 1 ? "s" : "s") :"00s";
        return hDisplay + mDisplay + sDisplay; 
      }

      function get_date()
      {
        let temp = 0;
    var first_part;
    var second_part;

     let Overall_session = JSON.parse(JSON.stringify(overallreport[0].sessiondetails));
     
     var sesssion_list=[];
      var session_list_key={};

    Overall_session.forEach((element)=>{
          if(typeof(element.heldon)!='undefined')
          {
            if(!(element.heldon.substr(0,10) in session_list_key))
            {
              session_list_key[element.heldon.substr(0,10)] = 0;
              sesssion_list.push(element.heldon.substr(0,10));
            }
          }
         });

    if(typeof(sesssion_list[sesssion_list.length-2])!='undefined')
    {
     first_part = new Date(sesssion_list[sesssion_list.length-2]).toDateString().split(' ').slice(1).join(' ');
    second_part = new Date(sesssion_list[sesssion_list.length-2]).toDateString().substring(0,3);
    }else
    {
    return "-";
    }
    
        return first_part; 
      }
  

  function get_session_recording(bodypart,exercisename,orientation,musclename,heldon)
  {
     let Overall_session = JSON.parse(JSON.stringify(overallreport[0].sessiondetails));
     let counter = 0;
     let final=0;
     Overall_session.forEach((element)=>{
         if(element.bodypart.toLowerCase()==bodypart.toLowerCase() && element.exercisename.toLowerCase()==exercisename.toLowerCase() && element.orientation.toLowerCase()==orientation.toLowerCase() && element.musclename.toLowerCase()==musclename.toLowerCase()){
          counter= counter+1
      if(element.heldon == heldon)
      {
        final = counter;
        return final;
        
      }
          }
         });
    return final;
       
  }
  
  function get_hold_time(holdtime)
  {
  
    var secounds = holdtime.split(":");
    var int_min = parseInt(secounds[0].replace('m',''));
    var int_secounds = parseInt(secounds[1].replace('s',''));

    if(int_min > 0){ 
      return int_min + 'm'+ ':' + int_secounds + 's'
    }else
    {
      return int_secounds + 's'
    }
  
  }

      function increasedRom(min,max,lastmin,lastmax)
      {
        var a = parseInt(max)-parseInt(min);
        var b = parseInt(lastmax)-parseInt(lastmin);
        var c =a-b
        return c;
      }

      function Gained_Rom(max,min,i)
      {
        var a = parseInt(max)-parseInt(min);
        var b = parseInt(lastsessions[i].maxangle)-parseInt(lastsessions[i].minangle);

        result = a;

        if(result>360)
          {
            result= 360;
          }

        if(result<0)
        {
          return 0
        }else if(isNaN(result))
        {
          return 0
        }
        else{

          return result;
        }
       
      }
      

      function increasedEmg(max, lastmax)
      {
        return parseInt(max)-parseInt(lastmax);
      }


      function get_avgMaxEmg(heldon)
      {
        let vartemp="";
        for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            return Math.round(python_variables[i].avgmaxemg) 
          }
          // vartemp = python_variables[i].download_time_stamp
        }
        return "-"
        
      }
      
      // For getting max ROM
      function get_MaxROM(heldon)
      {
        let vartemp="";
        for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            return Math.round(python_variables[i].rom_max)+"째"
          }
          // vartemp = python_variables[i].download_time_stamp
        }
        return "-"
        
      }

      function get_avgMaxROM(heldon)
      {
        let vartemp="";
        for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            return Math.round(python_variables[i].rom_avg_max)+"째"
          }
          // vartemp = python_variables[i].download_time_stamp
        }
        return "-"
        
      }
      
      // For getting min ROM
      function get_MinROM(heldon)
      {
        let vartemp="";
        for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            return Math.round(python_variables[i].rom_min)+"째"
          }
          // vartemp = python_variables[i].download_time_stamp
        }
        return "-"
        
      }


      function get_avgMinROM(heldon)
      {
        let vartemp="";
        for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            return Math.round(python_variables[i].rom_avg_min)+"째"
          }
          // vartemp = python_variables[i].download_time_stamp
        }
        return "-"
        
      }

     function get_Speed(heldon,activetime,reps)
     {
        let vartemp="";
        var active_time_list = activetime.split(':');
        var active_min = parseInt(active_time_list[0].replace('m',''));
        var active_sec = parseInt(active_time_list[1].replace('s',''));

        var active_time_total = active_min*60 + active_sec;
        var result = parseInt(reps)/active_time_total;
        result =Math.round(result * 100) / 100

        if(isNaN(result))
        {
          return 0 + ' reps/s'
        }else if(result=='Infinity'){
          return '-' + ' reps/s';
        }else {
          return result + ' reps/s';
        }
        for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            return python_variables[i].velocity + ' reps/s'
          }
          // vartemp = python_variables[i].download_time_stamp
        }
        return "-"
        
      }

      function overallRom(max, min)
      {
        // Max and Min is negative
        // if(parseInt(min)<0 && parseInt(max)<0)
        // {
        //   return 0;
        // }

        // if(parseInt(min)<0 && parseInt(max)>0)
        // {
        //   return parseInt(max);
        // }


        var result = parseInt(max)-parseInt(min);

        if(result>360)
        {
          result = 360;
        }

        if(result>0){
          return result;
        }
        else return 0;
      }

      function overallRompie(max, min)
      {
        // Max and Min is negative
        

      


        var result = parseInt(max)-parseInt(min);

        if(result>360)
        {
          result = 360;
        }

        if(result>0){
          return result;
        }
        else return result;
      }

      
  
  function overallRom_goalreached(max, min,ideal,heldon)
  {
        // Max and Min is negative

         for(let i =0; i < python_variables.length;i++)
        {

          if(python_variables[i].download_time_stamp == heldon)
          {
            max= python_variables[i].rom_max;
            min= python_variables[i].rom_min;
          }
          // vartemp = python_variables[i].download_time_stamp
        }

        // if(parseInt(min)<0 && parseInt(max)<=0)
        // {
        //   return 0;
        // }

        // if(parseInt(min)>=parseInt(ideal))
        // {
        //     return 0;
        // }

        // if(parseInt(min)<0 && parseInt(max)>0)
        // {
        //   return parseInt(max);
        // }
    
    


        var result = parseInt(max)-parseInt(min);

        if(result>360)
        {
          result = 360;
        }

        if(result>0){
          return result;
        }
        else return 0;
      }

function get_holdangle(holdangle)
{

        if (parseInt(holdangle)>0){
        return holdangle+'째';
        }
        else return "-";
      }


      function joint_range(body,exercisename)
      {

        if (romScale1.hasOwnProperty(body.concat(exercisename))) {
        return romScale1[body.concat(exercisename)];
        }
        else return 0;
      }

      function pie_range(user_angle,range)
      {
        var result = parseInt(360)-parseInt(user_angle);

        if(result < 0)
        {
          return 0;
        }
        else return result;
      }

        function getOverall_goalreached()
        {
       
        let total_goal=0;
        let counter=0;

        over_goal_reached=[];




        report[0].sessiondetails.map((e,i)=>{

           report[0].sessiondetails.map((h,j)=>{

           if(python_variables[j].download_time_stamp==e.heldon)
            {
              let range = joint_range(e.bodypart.toLowerCase(),e.exercisename.toLowerCase())

              
              let user_range = overallRom(python_variables[j].rom_max,python_variables[j].rom_min);
              if(user_range>range)
              {
                user_range = range;
                
              }
              if(range!=0)
              {
                goal_percentage = (user_range/range)*100;
                
              }else goal_percentage=100;
            over_goal_reached.push(goal_percentage);

            total_goal = total_goal + goal_percentage;
            counter = counter+1;

            }
          });       
         
        });



        if(counter>0)
        {
        return Math.round(total_goal/counter); 
      }else return 0;
    }

       function goalreached(ideal,user)
       {
        if(user<ideal)
        {
       return Math.round((user/ideal)*100);
       }
       else
        return 100;
       
      }



function calcTime() 
{


  // Offset for Bombay City
   var offset = +0;
  // create Date object for current location
  var d = new Date(report[0].sessiondetails[0].heldon);


  // convert to msec
  // subtract local time zone offset
  // get UTC time in msec
  var utc = d.getTime() + (d.getTimezoneOffset() * 60000);

  // create new Date object for different city
  // using supplied offset
  var nd = new Date(utc + (3600000*offset));
  var nd_array = nd.toLocaleString().split(',');
  var time = nd_array[1];
  var am_pm = time.split(" ");
  var am_pm_string = am_pm[2];
  var time_array  = time.split(":")
  var result = time_array[0] + ":" + time_array[1]+ " "  +am_pm_string;

  // return time as a string
  return result;
}
function comparision_Rom(min,max,last_min,last_max)
{
      var a= max-min;
      var b= last_max-last_min;
      var c= a-b;
      if(c>0)
      {
        return "There is an increment in the ROM compared to your previous session by " + c + "째 .";
      }  
      else if(c<0)
      {
        c= b-a;
        return "There is a decrement in the ROM compared to your previous session by " + c + "째 .";
      }
      else
      {
        return "The ROM is been constant compared to your previous session."
      }
}
function coordination(coordination,exercisename,side,bodypart)
{
  if(coordination>0)    
  return "Your " + side+" "+ bodypart + " " + exercisename + " movement is " + coordination + "% " + "coordinated."
 else
 return "The coordination is very poor."
}

function control_(control,exercisename,side,bodypart)
{
  if(control>0)    
  return "Your " + side+" "+ bodypart + " " + exercisename + " movement is " + coordination + "% " + "controlled."
 else
 return "The control is very poor."
}

function consistency(consist,exercisename,side,bodypart)
{
  if(consist>0)    
  return "Your " + side+" "+ bodypart + " " + exercisename + " movement has a consistency of "+ consist + "% . " 
 else
 return "The consistency is very poor."
}

function comparision_Emg(max,last_max)
{
      var a= max-last_max;
     
      if(a>0)
      {
        return "There is an increment in the EMG compared to your previous session by " + a + " uV.";
      }  
      else if(a<0)
      {
        a=last_max-max;
        return "There is a decrement in the EMG compared to your previous session by " + a + " uV.";
      }
      else
      {
        return "The EMG is been constant compared to your previous session."
      }
}
function getline(time) 
{
  var secounds = time.split(":");
   var int_min = parseInt(secounds[0].replace('m',''));
   var int_secounds = parseInt(secounds[1].replace('s',''));
  if(int_secounds>30 || int_min>1)
  {
    return "*Displayed graph is recorded for first 30 seconds only.";
  }
  return ' ';
 

    
}
function get_recordedtime(time)
{
  var secounds = time.split(":");
   var int_min = parseInt(secounds[0].replace('m',''));
   var int_secounds = parseInt(secounds[1].replace('s',''));
  if (int_min<10)
  {
    int_min="0"+int_min;
  }
  if(int_secounds<10 && int_min>=1)
  {
    int_secounds="0"+int_secounds;
  }
   if(int_min > 0){
    return int_min + 'm'+ ':' + int_secounds + 's';
   }else if(int_min <= 0 && int_secounds > 30)
   {
    return int_secounds + 's';
  }else
  {
    return int_secounds + 's'
  }

  
}




//function for pheezee score starts here

function pheezee_score(x,arr){

//const len = arr.length;
  //var statements =' ';
  //var avg_arr = [];

 let consist = Number(x.consistency);
 let smooth = Number(x.smoothness);
 let contrl = Number(x.controlled);
 if(contrl>5){
  contrl=5;
 }
 let coord = Number(x.coordination);
 let avg_value = 0;

 if (x.type_of=='ni'){

avg_value = (consist+smooth+contrl+coord)/4;
 avg_value = Math.round((avg_value/5) * 100) //avg_arr.push(avg_value);
}

 else{

  avg_value= (consist+smooth+contrl)/3;
  avg_value = Math.round((avg_value/5) * 100)
 //avg_arr.push(avg_value);
}

return avg_value;
}

//function for removing duplicate starts here

 function RemoveDupli(arr){
     arr.map(function (x,i){

    arr.map(function (y,j){
        if (arr[j].bodypart==arr[i].bodypart && arr[j].orientation==arr[i].orientation && arr[j].exercisename==arr[i].exercisename && arr[j].musclename==arr[i].musclename && arr[i].sessiontype == 'Active'){
            
            if (arr[j].maxemg>arr[i].maxemg){
                arr.splice(i,1);
            }
                else if(arr[j].maxemg<arr[i].maxemg) {
                    arr.splice(j,1);
                }
            }
        }
)
}
)
return arr;
 }

 //function for removin duplicate ends here


// function for new statements hypermobility, muscle activity, repeat session starts here


// function lastsessionemg(lastsession,maxemg){
//   let session_data = lastsession;
//   let current_session_max_rom = session_data.map(function(x) { return x.maxemg; });
  
//   function findMostFrequentValue(arr) {
//   // Create an object to store the frequency of each element
//   const frequency = {};
  
//   // Iterate through the array and count the occurrences of each element
//   arr.forEach(item => {
//     if (frequency[item]) {
//       frequency[item]++;
//     } else {
//       frequency[item] = 1;
//     }
//   });
  
//   // Find the maximum frequency
//   let maxFrequency = 0;
//   for (const key in frequency) {
//     if (frequency[key] > maxFrequency) {
//       maxFrequency = frequency[key];
//     }
//   }
  
//   // Find the element(s) with the maximum frequency
//   const mostFrequentValues = [];
//   for (const key in frequency) {
//     if (frequency[key] === maxFrequency) {
//       mostFrequentValues.push(key);
//     }
//   }
  
//   return mostFrequentValues;
// }

// // Input array
// const myArray = current_session_max_rom;

// // Call the function and get the output
// const result = findMostFrequentValue(myArray);

  
//   result.push(maxemg);
 

//   return result;
// }

function kranthi_testing(values){

}

function lastsessionemg(lastsession,maxemg){
  let session_data = lastsession;
  let originalArray = session_data;
  const output = originalArray.map(item => ({
  heldon: item.heldon.split(' ')[0], // Extract date part from 'heldon' property
  maxemg: item.maxemg,
  bodypart: item.bodypart,
  bodyorientation: item.bodyorientation,
  exercisename: item.exercisename,
  musclename: item.musclename,
  orientation: item.orientation,
}));


const inputArray = output

const outputs = [];

// Create an object to keep track of the highest maxemg for each heldon date
const maxemgByDate = {};

// Loop through the inputArray to find the highest maxemg for each heldon date
for (const item of inputArray) {
  const { heldon, maxemg } = item;

  // If heldon date is already present in maxemgByDate, check if the current maxemg is higher
  if (maxemgByDate[heldon]) {
    if (parseInt(maxemg) > parseInt(maxemgByDate[heldon].maxemg)) {
      maxemgByDate[heldon] = { ...item };
    }
  } else {
    // If heldon date is not present, add the current item to maxemgByDate
    maxemgByDate[heldon] = { ...item };
  }
}

// Convert the maxemgByDate object into an array to get the final output
for (const date in maxemgByDate) {
  outputs.push(maxemgByDate[date]);
}
  
  
  // console.log(outputs);
  
  
  

  let current_session_max_rom = outputs.map(function(x) { return x.maxemg; });
  current_session_max_rom.push(maxemg);

  return current_session_max_rom;
}
function lastsessionrom(lastsession,maxangle,minangle){
  let session_data = lastsession;
  let current_range_gained;
  let last_range_gained;
  let arrROM=[];
  let originalArray = session_data;
  const output = originalArray.map(item => ({
  heldon: item.heldon.split(' ')[0], // Extract date part from 'heldon' property
  maxemg: item.maxemg,
  bodypart: item.bodypart,
  bodyorientation: item.bodyorientation,
  exercisename: item.exercisename,
  musclename: item.musclename,
  maxangle: item.maxangle,
  minangle: item.minangle,
  orientation: item.orientation,
}));


const inputArray = output

const outputs = [];

// Create an object to keep track of the highest maxemg for each heldon date
const maxemgByDate = {};

// Loop through the inputArray to find the highest maxemg for each heldon date
for (const item of inputArray) {
  const { heldon, maxemg } = item;

  // If heldon date is already present in maxemgByDate, check if the current maxemg is higher
  if (maxemgByDate[heldon]) {
    if (parseInt(maxemg) > parseInt(maxemgByDate[heldon].maxemg)) {
      maxemgByDate[heldon] = { ...item };
    }
  } else {
    // If heldon date is not present, add the current item to maxemgByDate
    maxemgByDate[heldon] = { ...item };
  }
}

// Convert the maxemgByDate object into an array to get the final output
for (const date in maxemgByDate) {
  outputs.push(maxemgByDate[date]);
}

// console.log(outputs);

  session_data.map(function(x,i){

  if((x.maxangle>0 && x.minangle>0)|| (x.maxangle<0 && x.minangle<0 )){ 
    last_range_gained=Math.abs(Math.abs(x.maxangle)-Math.abs(x.minangle));
}

else{
  last_range_gained=Math.abs(x.maxangle);
}
arrROM.push(Number(last_range_gained));
})


if((maxangle>0 && minangle>0)|| (maxangle<0 && minangle<0 )){ 
  current_range_gained=Math.abs(Math.abs(maxangle)-Math.abs(minangle));
}
else{
  current_range_gained=Math.abs(maxangle);
}

arrROM.push(Number(current_range_gained));

  return arrROM;
}


function hypermobility(arr,arr1)
{
 
  try {
  if (arr1!=0){
    
    let Statments="";
    var date1 = new  Date(arr1[0].heldon);
    var date2 = new  Date(arr[0].heldon);
    var Difference_In_Time = date2.getTime() - date1.getTime();
    var Difference_In_Days = Math.ceil(Difference_In_Time / (1000 * 3600 * 24));
    
    
   arr = getnewtable(arr);
    //arr = RemoveDupli(arr);
    arr1 = getnewtable(arr1);
    //arr1 = RemoveDupli(arr1);

arr.map(function (x,i){
    arr1.map(function (y,j){
        

        if (arr1[j].bodypart==arr[i].bodypart &&  arr1[j].exercisename==arr[i].exercisename && arr1[j].musclename==arr[i].musclename && arr[i].exercisename!='Isometric'){

            
          if(arr1[j].orientation==arr[i].orientation ){
        
            var current_normal_rom=arr[i].maxangleselected-arr[i].minangleselected;


            //algorithm for getting good ROM  for current session

            if((arr[i].maxangle>0 && arr[i].minangle>0)|| (arr[i].maxangle<0 && arr[i].minangle<0)){
                
              var current_range_gained=Math.abs(arr[i].maxangle)-Math.abs(arr[i].minangle);
          }
          
          else{
              var current_range_gained=Math.abs(arr[i].maxangle);
          }
          
          
         // algorithm for getting good ROM  for last session
          if((arr1[j].maxangle>0 && arr1[j].minangle>0)|| (arr1[j].maxangle<0 && arr1[j].minangle<0 )){
              
              var last_range_gained=Math.abs(arr1[j].maxangle)-Math.abs(arr1[j].minangle);
          }
          
          else{
              var last_range_gained=Math.abs(arr1[j].maxangle);
          }
            
            
            
            var current_ROMValue =  (Number(current_range_gained)/Number(current_normal_rom) * 100);
            
            var  last_ROMValue = (Number(last_range_gained)/Number(current_normal_rom) * 100);
            var range_gained_change = Math.floor(current_ROMValue)-Math.floor(last_ROMValue);
            
            var joint_exercise_muscle = "\n  For "+ arr[i].bodypart + " joint " + arr[i].exercisename + " movement,\n";
    
            
            
            
          
             var current_EMG=arr[i].maxemg;
             
             var last_EMG=arr1[j].maxemg;
             
             var EMG_value_change = Math.floor(current_EMG)-Math.floor(last_EMG);
            
            

            Statments=Statments+joint_exercise_muscle;
    
            if ( range_gained_change<0){
                let ROMStat = "\n The joint mobility of "+arr[i].orientation+" side decreased from " + Math.floor(last_ROMValue) + "% to " + Math.floor(current_ROMValue) +"% of healthy ROM in " + Difference_In_Days + " days. " 
            Statments=Statments+ROMStat;
               
                    
            }
            
            else if (range_gained_change>0){
                
              let ROMStat = "\n The joint mobility of "+arr[i].orientation+" side increased from " + Math.floor(last_ROMValue) + "% to " + Math.floor(current_ROMValue) +"% of healthy ROM in " + Difference_In_Days + " days."
            
              Statments=Statments+ROMStat;
            }

            else{
              let ROMStat = "\n The joint mobility of "+arr[i].orientation+" side did not change";
            
              Statments=Statments+ROMStat;
            }
          
          if ( EMG_value_change<0){
          
          EMGStat = "\n The EMG of "+arr[i].orientation+" side decreased from "+ Number(last_EMG) + "uV to " + Number(current_EMG) + "uV in " + Difference_In_Days + " days.";
          Statments=Statments+EMGStat;
          
          }
          else if (EMG_value_change>0){
          EMGStat = "\n The EMG of "+arr[i].orientation+" side increased from "+ Number(last_EMG) + "uV to " + Number(current_EMG) + "uV in " + Difference_In_Days + " days.";
          Statments=Statments+EMGStat;
          }
          else{
            EMGStat = "\n The EMG of "+arr[i].orientation+" side did not change";
            Statments=Statments+EMGStat;
          }




        }
        
        //end of same side loop

        //start of opposite side loop
        
         if ( arr[i].orientation=='Left' && arr1[j].orientation=="Right" ){
        
           
          var last_ref_EMG=arr1[j].maxemg;
          var current_EMG=arr[i].maxemg;
          var current_ref_EMG_change =  (Number(current_EMG)/Number(last_ref_EMG) * 100);


          
          //var EMGStat = "\n The current max EMG of "+arr[i].orientation+" side is "  + Math.floor(current_ref_EMG_change)+"% of its reference side. "
          //Statments=Statments+EMGStat;

          if (current_ref_EMG_change<100){

          
            var EMGStat = "\n The current EMG of "+arr[i].orientation+" side is weaker than its reference side.";
          }
  
          else{
  
            var  EMGStat = "\n The EMG of "+arr[j].orientation+" side is weaker than its reference side.";
  
          }





          if((arr[i].maxangle>0 && arr[i].minangle>0)|| (arr[i].maxangle<0 && arr[i].minangle<0)){
                
            var current_ROM=Math.abs(arr[i].maxangle)-Math.abs(arr[i].minangle);
        }
        
        else{
            var current_ROM=Math.abs(arr[i].maxangle);
        }
        
        
        
        if((arr1[j].maxangle>0 && arr1[j].minangle>0)|| (arr1[j].maxangle<0 && arr1[j].minangle<0)){
            
            var last_ref_ROM=Math.abs(arr1[j].maxangle)-Math.abs(arr1[j].minangle);
        }
        
        else{
            var last_ref_ROM=Math.abs(arr1[j].maxangle);
        }

        
          var current_ref_ROM_change =  (Number(current_ROM)/Number(last_ref_ROM) * 100);
        
          if (current_ref_ROM_change<100){

          
          var ROMStat = "\n The current ROM of "+arr[i].orientation+" side is weaker than its reference side.";
        }

        else{

          var ROMStat = "\n The current ROM of "+arr[i].orientation+" side is stronger than its reference side.";

        }
          
          Statments=Statments+EMGStat+ROMStat;
            
          
      }
        }
}
  )
}
)
  return Statments;
}


}
catch(err) {
  let Statments2 = err;
  return Statments2;
}
}

function healthysideDir(orientation)
{
    if(orientation == 'Right')return 'Left';
    else return 'Right';
}

function firstWeekFunction(orientation,bodypart,exercisename,musclename,heldon,arr,arr1){
  var week_date1 =new  Date(heldon);
  var week_date2 =0;
  var diff_In_Weeks;
  for(let j=0; j<arr1.length; j++){
    if(arr1[j].orientation==orientation && arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename && exercisename!='Isometric'){   
       week_date2 =new  Date(arr1[j].heldon);
    }
    break;
  }
  if(week_date2==0 )
  { diff_In_Weeks = 0; } else{
  var diff_In_Time =  week_date1.getTime() - week_date2.getTime();
  var diff_In_Days = Math.ceil (diff_In_Time / (1000 * 3600 * 24));
 diff_In_Weeks =  Math.floor(diff_In_Days/ 7);
  //diff_In_Weeks=week_date2;
  }
return {
  firstweek: diff_In_Weeks,
  };
}

function kranhti(arrr){
  let phani =arrr;

  return phani; 
}





function firstImageFunction(orientation,bodypart,exercisename,musclename,arr,arr1,affected,arr2,gender) {

  

  var img_id="";
  var img_name="";
  var data_label="";

      if(gender == 'Male')
      {
        if(affected == orientation ) { 
          img_id="sny";
          for(let j=0; j<arr1.length; j++){
          if(arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){

            if(arr1[j].orientation != orientation ){
              img_id="syy";
            }
            for(let i=0; i<arr.length; i++){
              if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
                img_id="syy";
              }
            }
        
           }
          }

          if(arr2==0 ) { 
          for(let i=0; i<arr.length; i++){
            if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
              img_id="syy";
            }
          }
          }
          } 

          if(affected != orientation && affected!="Bi-Lateral"){
            img_id="oy";
          }

          if(affected=="Bi-Lateral"){
            img_id="bny";

            for(let j=0; j<arr1.length; j++){
              if(arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){
    
                if(arr1[j].orientation != orientation ){
                  img_id="byy";
                }
                for(let i=0; i<arr.length; i++){
                  if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
                    img_id="byy";
                  }
                }
            
              }
              }
    
              if(arr2==0 ) { 
              for(let i=0; i<arr.length; i++){
                if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
                  img_id="byy";
                }
              }
            }
          }
            
              if(img_id=="syy"){
                if(orientation=="Left"){
                  img_name= "Male_"+bodypart+"_GREEN"+"-RED";
                } else if(orientation=="Right"){
                    img_name="Male_"+bodypart+"_RED"+"-GREEN";
                }
            } else if(img_id=="sny"){
                if(orientation=="Left"){
                  img_name="Male_"+bodypart+"_GREY"+"-RED";
                    data_label="*healthy side data not available";
                } else if(orientation=="Right"){      
                    img_name="Male_"+bodypart+"_RED"+"-GREY";
                    data_label="*healthy side data not available";
                }        
            } else if(img_id=="oy"){
                if(orientation=="Left"){
                  img_name="Male_"+bodypart+"_NO"+"-GREEN";
                } else if(orientation=="Right"){
                  img_name="Male_"+bodypart+"_GREEN"+"-NO";
                }        
            } else if(img_id=="byy"){
              img_name="Male_"+bodypart+"_RED"+"-RED";
            } else if(img_id=="bny"){
              if(orientation=="Left"){
                img_name="Male_"+bodypart+"_GREY"+"-RED";
                  data_label="*healthy side data not available";
              } else if(orientation=="Right"){      
                  img_name="Male_"+bodypart+"_RED"+"-GREY";
                  data_label="*healthy side data not available";
              }   
            } 

        if(!affected){
          data_label="*Please update the affected side in the edit patient";
          img_name="Male_Full_default";
        }

        if(affected == "Bi-Lateral")
        {
          data_label="";
        }


  return {
  firstimage: img_name,
  firstdatalabel:data_label,
  };
  }
      else if(gender == 'Female')
      {
        if(affected == orientation ) { 
          img_id="sny";
          for(let j=0; j<arr1.length; j++){
          if(arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){

            if(arr1[j].orientation != orientation ){
              img_id="syy";
            }
            for(let i=0; i<arr.length; i++){
              if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
                img_id="syy";
              }
            }
        
           }
          }

          if(arr2==0 ) { 
          for(let i=0; i<arr.length; i++){
            if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
              img_id="syy";
            }
          }
        }
        } 

        if(affected != orientation && affected!="Bi-Lateral"){
          img_id="oy";
        }

        if(affected=="Bi-Lateral"){
          img_id="bny";

          for(let j=0; j<arr1.length; j++){
            if(arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){
  
              if(arr1[j].orientation != orientation ){
                img_id="byy";
              }
              for(let i=0; i<arr.length; i++){
                if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
                  img_id="byy";
                }
              }
          
             }
            }
  
            if(arr2==0 ) { 
            for(let i=0; i<arr.length; i++){
              if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
                img_id="byy";
              }
            }
          }
        }
       
            if(img_id=="syy"){
              if(orientation=="Left"){
                img_name="Female_" + bodypart+"_GREEN"+"-RED";
              } else if(orientation=="Right"){
                  img_name="Female_" +bodypart+"_RED"+"-GREEN";
              }
          } else if(img_id=="sny"){
              if(orientation=="Left"){
                img_name="Female_" +bodypart+"_GREY"+"-RED";
                  data_label="*healthy side data not available";
              } else if(orientation=="Right"){      
                  img_name="Female_" +bodypart+"_RED"+"-GREY";
                  data_label="*healthy side data not available";
              }        
          } else if(img_id=="oy"){
              if(orientation=="Left"){
                img_name="Female_" +bodypart+"_NO"+"-GREEN";
              } else if(orientation=="Right"){
                img_name="Female_" +bodypart+"_GREEN"+"-NO";
              }        
          } else if(img_id=="byy"){
            img_name="Female_" +bodypart+"_RED"+"-RED";
          } else if(img_id=="bny"){
            if(orientation=="Left"){
              img_name="Female_" +bodypart+"_GREY"+"-RED";
                data_label="*healthy side data not available";
            } else if(orientation=="Right"){      
                img_name="Female_" +bodypart+"_RED"+"-GREY";
                data_label="*healthy side data not available";
            }   
          } 

      if(!affected){
        data_label="*Please update the affected side in the edit patient";
        img_name="Female_Full_default";
      }

      if(affected == "Bi-Lateral")
      {
        data_label="";
      }
      

return {
firstimage: img_name,
firstdatalabel:data_label,
};
      }
}

function zeroROMtable(orientation,bodypart,exercisename,musclename,maxrom,arr,affected){

  // console.log("shailabrom1", arr);
  var zero_goodside_rom=0;
  var zero_goodside=0;
  var zero_goodside_romdeg="-";
  if(affected == orientation || affected=="Bi-Lateral") { 
  for(let i=0; i<arr.length; i++){
    if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
      zero_goodside_rom=Number(Math.abs(arr[i].maxangle-arr[i].minangle));
      zero_goodside = Math.floor((Number(maxrom)/zero_goodside_rom)*100);
      if(zero_goodside < 25){zero_goodside="Needs Attention"} 
      else if(zero_goodside <= 50){zero_goodside="Fair"} 
      else if(zero_goodside <= 75){zero_goodside="Good"} 
      else{zero_goodside="Excellent"}
    }
  }
}
if(zero_goodside_rom > 0 ){zero_goodside_romdeg=zero_goodside_rom + "째"}
if(zero_goodside_rom == 0 ){zero_goodside_rom="-"}
if(zero_goodside == 0 ){zero_goodside="-"}

return{
  zerogood:zero_goodside_rom,
  zeropercent:zero_goodside,
  zerouv:zero_goodside_romdeg
}

}

function zeroEMGtableKranthi(orientation,bodypart,exercisename,musclename,current_session,patientinjured,lastsession_array_new_filter_kranthi){
  const current_array_data = current_session;
  const orientationFilter = orientation;
  const bodypartFilter = bodypart;
  const exercisenameFilter = exercisename;
  const musclenameFilter = musclename;
  

  
  
  return 0;
}

function zeroEMGtable(orientation, bodypart, exercisename, musclename, maxemg, arr, affected, noramtive_emg_data_kt, noramtive_rom_data_kt) {
  let noramtive_emg_data_kt_value = noramtive_emg_data_kt;
 
  let noramtive_rom_data_kt_value = noramtive_rom_data_kt;
  let normative_exercisename = exercisename;
  let normative_bodypart = bodypart;
  let noramtive_musclename = musclename;
  let normative_return_value;
  
  

  const array = noramtive_emg_data_kt_value;

  function filterArray(input) {
    const [motion, joint, muscle] = input.split(',').map((item) => item.trim());
    const output = {};

    if (motion && joint && muscle && Array.isArray(array[joint])) {
      array[joint].forEach((jointMotion) => {
        Object.keys(jointMotion).forEach((motionType) => {
          if (motionType.toLowerCase().includes(motion.toLowerCase())) {
            const filteredArray = jointMotion[motionType][0][muscle];
            if (filteredArray !== undefined) {
              if (!output[joint]) {
                output[joint] = [];
              }
              output[joint].push({ [motionType]: [{ [muscle]: filteredArray }] });
            }
          }
        });
      });
    }

    return output;
  }

  const input = `${normative_exercisename}, ${normative_bodypart}, ${noramtive_musclename}`;
   
  
// const input = "Plantarflexion, Ankle, Soleus";
  // Call the function and log the output
  const output = filterArray(input);
  // console.log("555555555555555555555555",input);
  // Check if the output is not an empty object
    if (Object.keys(output).length !== 0) {
      // Extract the value if the output is not empty
      normative_return_value = output[normative_bodypart][0][normative_exercisename][0][noramtive_musclename];
    
    } else {
      normative_return_value = "-1";
    }
    

 let normative_return_value_ktr = parseInt(normative_return_value);
 



  var zero_goodside_emg = 0;
  var zero_goodside = 0;
  var zero_goodside_emguv = "-";
  // if (affected == orientation || affected == "Bi-Lateral") {
    // for (let i = 0; i < arr.length; i++) {
      // if (arr[i].orientation != orientation && arr[i].bodypart == bodypart && arr[i].exercisename == exercisename && arr[i].musclename == musclename) {
        zero_goodside_emg = Number(normative_return_value_ktr);
        
        zero_goodside = Math.floor((Number(maxemg) / zero_goodside_emg) * 100);
          
        if(zero_goodside <=0){zero_goodside = "Poor"}
        else if (zero_goodside <= 25) { zero_goodside = "Poor" }
        else if (zero_goodside <= 50) { zero_goodside = "Fair" }
        else if (zero_goodside <= 75) { zero_goodside = "Good" }
        else if (zero_goodside >= 75) { zero_goodside = "Excellent" }
        // else { zero_goodside = "Excellent" }
      
      // }
    // }
  // }
  if (zero_goodside_emg > 0) { zero_goodside_emguv = zero_goodside_emg + " uV" }
  if (zero_goodside_emg == 0) { zero_goodside_emg = "-" }
  if (zero_goodside == 0) { zero_goodside = "-" }

  return {
    zerogood: zero_goodside_emg,
    zeropercent: zero_goodside,
    zerouv: zero_goodside_emguv
  }
}

function getBackgroundColor(zeropercent) {
  let backgroundColor = "";
  switch (zeropercent) {
    case "Poor":
      backgroundColor = "color: red;";
      break;
    case "Fair":
      backgroundColor = "color: orange;";
      break;
    case "Good":
      backgroundColor = "color: #00B286;";
      break;
    case "Excellent":
      backgroundColor = "color: #00B286;";
      break;
     case "-":
      backgroundColor = "color: black;";
      break;
    default:
      backgroundColor = "color: #E6F3FF;";
      break;
  }
  return backgroundColor;
}

function getImageDisplay(reps_speed,reps_normative_data,bodypart_kt,exercisename_kt) {
  
  const dataArray = reps_normative_data;
  const input1 = bodypart_kt;
  const input2 = exercisename_kt;
  let backgroundColor;
  
  
  
  function fetchData(inputValue1, inputValue2) {
  // Find the object that corresponds to the given input value1 (e.g., "Knee")
  const targetObject = dataArray.find((item) => item.hasOwnProperty(inputValue1));

  // Check if the target object exists and has the specified property (e.g., "Flexion")
  if (targetObject && targetObject[inputValue1].hasOwnProperty(inputValue2)) {
    return targetObject[inputValue1][inputValue2];
  } else {
    // Return some default value or handle the case when the input values are not found
    return "Data not found";
  }
}
const output = fetchData(input1, input2);
let comparing_value = output/90;
comparing_value = comparing_value.toFixed(2);

const input_value = reps_speed;
// // Split the input string based on "reps/s" to separate the numeric value
const parts = input_value.split("reps/s");
// // Get the numeric value from the first part of the split
const output_final_value = parts[0];



if(output_final_value <= comparing_value){
  backgroundColor = "display: visible;";
}else{
  backgroundColor = "display: none;";
}


  
  return backgroundColor;
}

function getBackgroundColorKtRom(zeropercent) {
  let backgroundColor = "color: #00B286;";
  let value_getting = zeropercent;
  
  
  if(value_getting <= 33){
     backgroundColor = "color: red;";
  }else if(value_getting <= 66){
     backgroundColor = "color: orange;";
  }else if(value_getting > 66){
     backgroundColor = "color: #00B286;";
  }else{
    backgroundColor = "color: #E6F3FF;";
  }
 
  return backgroundColor;
}





function eeshan_firstEMGtable(orientation,bodypart,exercisename,musclename,maxemg,arr,arr1,af) {
  var current_side=orientation;
  var affected_side=af;

  var goodside = 0;
  var cur_goodside_emg=0;
  var goodside_emg=0;
  var baseline_emg=0;
  var baseline_goodside=0;
  var arrow_id="";
  var arrow_color="";
  var new_emg_level;
  var new_emg_uv="-";

    for(let i=0; i<arr.length; i++){
  if(arr[i].orientation != orientation && arr[i].bodypart==bodypart &&  arr[i].exercisename==exercisename && arr[i].musclename==musclename ){
    cur_goodside_emg=Number(arr[i].maxemg);
  }
}

  if(arr1!=0 )
  {

if(affected_side == current_side ) { 
  for(let j=0; j<arr1.length; j++){
  if(arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){
    if(arr1[j].orientation==orientation ){
         baseline_emg=Number(arr1[j].maxemg); 
    }

    if(arr1[j].orientation != orientation ){
      goodside_emg=Number(arr1[j].maxemg);
    }
   }
  }
    if(cur_goodside_emg > goodside_emg){
     goodside_emg=cur_goodside_emg;
    }

    if(goodside_emg !=0){
       goodside = Math.floor((Number(maxemg)/goodside_emg)*100);
         baseline_goodside=Math.floor((baseline_emg/goodside_emg)*100);
    }
   if(goodside >100){goodside="Healthy"}
   if(baseline_goodside > 100){baseline_goodside="Healthy"}    

} 

else if(affected_side != current_side && affected_side!="Bi-Lateral") {
  for(let j=0; j<arr1.length; j++){
    if(arr1[j].orientation==orientation && arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){
         baseline_emg=Number(arr1[j].maxemg);
    }
  }
}

else if(affected_side=="Bi-Lateral") {
  for(let j=0; j<arr1.length; j++){
    if(arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename ){
      if(arr1[j].orientation==orientation ){
           baseline_emg=Number(arr1[j].maxemg); 
      }
  
      if(arr1[j].orientation != orientation ){
        goodside_emg=Number(arr1[j].maxemg);
      }
     }
    }
      if(cur_goodside_emg > goodside_emg){
       goodside_emg=cur_goodside_emg;
      }
  
      if(goodside_emg !=0){
         goodside = Math.floor((Number(maxemg)/goodside_emg)*100);
           baseline_goodside=Math.floor((baseline_emg/goodside_emg)*100);
      }
     if(goodside >100){goodside="Healthy"}
     if(baseline_goodside > 100){baseline_goodside="Healthy"} 

}
  


}
if(goodside_emg > 0){new_emg_uv=goodside_emg+" uV"}
if(Number(baseline_emg)>Number(maxemg)){arrow_id="Red-Downward"; arrow_color="#D22424";}else{arrow_id="Green-Upward"; arrow_color="#00B286";}
if(baseline_emg == 0){baseline_emg="-"};
if(goodside_emg == 0){goodside_emg="-"}
if(goodside == 0){goodside="-"}
if(baseline_goodside == 0){baseline_goodside="-"}

  return {
innerfirst: goodside,
innersecond: goodside_emg,
innerthird: baseline_emg,
innerbasegood: baseline_goodside,
innerarrow: arrow_id,
innerarrowcol: arrow_color,
innernew_emg_uv:new_emg_uv,
  };
} 




function mmtFunction(mmt_grade){
 var mmtLevel="";
if(mmt_grade=="0" || mmt_grade==""){
    mmtLevel='No Movement'
} else if(mmt_grade=="1" || mmt_grade=="1+"){
    mmtLevel='Slight Movement'
} else if(mmt_grade=="2" || mmt_grade=="2+"){
    mmtLevel='Movement without Resistance'
} else if(mmt_grade=="3" || mmt_grade=="3+"){
    mmtLevel='Movement against Gravity'
} else if(mmt_grade=="4" || mmt_grade=="4+"){
    mmtLevel='Movement with Resistance'
} else if(mmt_grade=="5"){
    mmtLevel='Normal Strength'
} 
return mmtLevel;
}


function firstROMtable(orientation,bodypart,exercisename,musclename,arr,arr1,maxangle,minangle,maxselected,noramtive_emg_data_kt,noramtive_rom_data_kt){
  
  let noramtive_emg_data_kt_value = noramtive_emg_data_kt;
  let noramtive_rom_data_kt_value = noramtive_rom_data_kt;
  let normative_exercisename = exercisename;
  let normative_bodypart = bodypart;
  let normative_return_value;
  
  function getPropertyValue(array, input) {
  const [category, property] = input.split(',');

  if (array.hasOwnProperty(category) && array[category].hasOwnProperty(property)) {
    return array[category][property];
  } else {
    return null;
  }
}
  const input = `${normative_bodypart},${normative_exercisename}`;
  
  const inputArray = input.split(',');
  const myArray = noramtive_rom_data_kt_value;
  const output = getPropertyValue(myArray, input);
  if (output === null) {
    normative_return_value = "-1"
  } else {
    normative_return_value = output;
  }


  let normative_return_value_ktr = parseInt(normative_return_value);
  
  
  
  var baseline_goodside_rom=0;
  var goodside_rom=0;
  var baseline_rom=0;
  var cur_rom=0;
  var rom_arrow_id="";
  var rom_arrow_color=""; 

 
  if(( maxangle>0 && minangle>0 )|| (maxangle<0 && minangle<0 ) ){    
    cur_rom=Math.abs(maxangle)-Math.abs(minangle);
    cur_rom = Math.abs(cur_rom);
  } else{
    cur_rom=Math.abs(maxangle)+Math.abs(minangle);
  }

  goodside_rom=Math.floor((Number(cur_rom)/Number(normative_return_value_ktr))*100);
  if( goodside_rom>100 ){ goodside_rom="100"}

  if(arr1!=0 ){
    arr1.map(function (y,j){

  if(arr1[j].orientation==orientation && arr1[j].bodypart==bodypart &&  arr1[j].exercisename==exercisename && arr1[j].musclename==musclename && exercisename!='Isometric'){
    if((arr1[j].maxangle>0 && arr1[j].minangle>0)|| (arr1[j].maxangle<0 && arr1[j].minangle<0 ) ){             
      baseline_rom=Math.abs(arr1[j].maxangle)-Math.abs(arr1[j].minangle);
    } else{
      baseline_rom=Math.abs(arr1[j].maxangle)+Math.abs(arr1[j].minangle);
    }
   baseline_goodside_rom=Math.floor((baseline_rom/Number(maxselected))*100)
  if( baseline_goodside_rom>100 ){baseline_goodside_rom="Healthy"}
  } 
})

  }

  if(cur_rom < baseline_rom){rom_arrow_id="Red-Downward"; rom_arrow_color="#D22424";}else{rom_arrow_id="Green-Upward"; rom_arrow_color="#00B286";}
return{
  innerbaserom:baseline_rom,
  innergoodrom:goodside_rom,
  innerbasegoodrom: baseline_goodside_rom,
  innercurrom: cur_rom,
  innerromarrow: rom_arrow_id,
  innerromarrowcol: rom_arrow_color,
};
}






function patientage(dob){
  let dateofbirth = dob;


  if(dateofbirth.length > 3){
  var from = dateofbirth.split("/");
var birthdateTimeStamp = new Date(from[2], from[1] - 1, from[0]);
var cur = new Date();
var diff = cur - birthdateTimeStamp;
// This is the difference in milliseconds
var currentAge = Math.floor(diff/31557600000);
  return Number(currentAge);
  }
  else {
    return dateofbirth;
  }
}

function getnewtable(data){
  function removeDuplicates(inputArray) {
    let outputArray = [];
  
    inputArray.forEach((item) => {
      const duplicateItem = outputArray.find(
        (i) =>  i.bodypart === item.bodypart && i.exercisename === item.exercisename && i.orientation === item.orientation && i.musclename === item.musclename
      );
  
      if (duplicateItem) {
        if (item.maxemg > duplicateItem.maxemg) {
          outputArray = outputArray.map((i) =>
            i === duplicateItem ? item : i
          );
        }
      } else {
        outputArray.push(item);
      }
    });
  
    return outputArray;
  }
  let return_value = removeDuplicates(data)
  return return_value;
}

function heldon_date_array(helod_date){
  const currentYear = new Date().getFullYear();
  let heldon_date_values = helod_date;
  let heldon_date_values_sessionA =  heldon_date_values.map(function(x){return x.heldon})
  let heldon_date_values_arrA=[...new Set(heldon_date_values_sessionA)];
  let heldon_date_values_session =  heldon_date_values.map(function(x){return x.heldon.split(" ") [0]})
  let heldon_date_values_arr=[...new Set(heldon_date_values_session)];

  return heldon_date_values_arrA;
}


function report_new_page(get_session_recording,lastsessions_array_kt,injured_side_kt){

  let kranthi_currentsession = get_session_recording;
  let kranthi_lastsession = lastsessions_array_kt;
  let kranthi_injured_side = injured_side_kt;
  var filter_data_json = [];
  var filter_data_json_currentsession = [];
  var filter_data_json_lastsession = [];
  
  if (kranthi_injured_side === undefined) {
  // console.log("kranthi_injured_side is undefined");
  for (var i = 0; i < kranthi_currentsession.length; i++) {
  var obj = kranthi_currentsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json.push(arrElement);
}
return filter_data_json;
}else if(kranthi_injured_side === "Bi-Lateral"){
  for (var i = 0; i < kranthi_currentsession.length; i++) {
  var obj = kranthi_currentsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json.push(arrElement);
}
return filter_data_json;
}else if(kranthi_injured_side === "Left"){
 
  if(kranthi_lastsession != 0){
   
      let filteredArray_lastsession = kranthi_lastsession.filter((item) => item.orientation === "Right");
  for (var i = 0; i < filteredArray_lastsession.length; i++) {
  var obj = filteredArray_lastsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json_lastsession.push(arrElement);
}
  
  
  // let filteredArray_currentsession = kranthi_currentsession.filter((item) => item.orientation === "Right");
  for (var i = 0; i < kranthi_currentsession.length; i++) {
  var obj = kranthi_currentsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json_currentsession.push(arrElement);
}

function removeDuplicates(array) {
  const uniqueCombinations = new Set();
  const result = [];

  for (const subArray of array) {
    const combination = subArray.slice(0, 3).join(',');
    if (!uniqueCombinations.has(combination)) {
      uniqueCombinations.add(combination);
      result.push(subArray.slice(0, 2));
      if (subArray.length > 3) {
        result[result.length - 1].push(subArray[3]);
      }
    }
  }

  return result;
}
const inputArray =  filter_data_json_currentsession;
const outputArray = removeDuplicates(inputArray);

function filterArray(array_current, check_data) {
  const output_kt = [];

  check_data.forEach(data => {
    const [targetJoint, targetMuscle, targetAction] = data;
    const filteredItems = array_current.filter(item => {
      const [joint, muscle, side, action] = item;
      return joint === targetJoint && muscle === targetMuscle && action === targetAction;
    });
    if (filteredItems.length > 0) {
      output_kt.push(...filteredItems);
    }
  });

  return output_kt;
}
const array_current = filter_data_json_lastsession;
const check_data = outputArray;
const result_filter_data_json_lastsession = filterArray(array_current, check_data);

// console.log("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",result_filter_data_json_lastsession);


// console.log("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",outputArray);

filter_data_json = [...filter_data_json_currentsession, ...result_filter_data_json_lastsession];


return filter_data_json;
  }else if(kranthi_lastsession == 0){
    // console.log("pppppppppppppppppppppppppp","Working_equalto");
      for (var i = 0; i < kranthi_currentsession.length; i++) {
  var obj = kranthi_currentsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json.push(arrElement);
}
return filter_data_json;
  }

  
}else if(kranthi_injured_side === "Right"){
  
  if(kranthi_lastsession != 0){
   
      let filteredArray_lastsession = kranthi_lastsession.filter((item) => item.orientation === "Left");
  for (var i = 0; i < filteredArray_lastsession.length; i++) {
  var obj = filteredArray_lastsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json_lastsession.push(arrElement);
}
  
  
  // let filteredArray_currentsession = kranthi_currentsession.filter((item) => item.orientation === "Right");
  for (var i = 0; i < kranthi_currentsession.length; i++) {
  var obj = kranthi_currentsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json_currentsession.push(arrElement);
}

function removeDuplicates(array) {
  const uniqueCombinations = new Set();
  const result = [];

  for (const subArray of array) {
    const combination = subArray.slice(0, 3).join(',');
    if (!uniqueCombinations.has(combination)) {
      uniqueCombinations.add(combination);
      result.push(subArray.slice(0, 2));
      if (subArray.length > 3) {
        result[result.length - 1].push(subArray[3]);
      }
    }
  }

  return result;
}
const inputArray =  filter_data_json_currentsession;
const outputArray = removeDuplicates(inputArray);

function filterArray(array_current, check_data) {
  const output_kt = [];

  check_data.forEach(data => {
    const [targetJoint, targetMuscle, targetAction] = data;
    const filteredItems = array_current.filter(item => {
      const [joint, muscle, side, action] = item;
      return joint === targetJoint && muscle === targetMuscle && action === targetAction;
    });
    if (filteredItems.length > 0) {
      output_kt.push(...filteredItems);
    }
  });

  return output_kt;
}
const array_current = filter_data_json_lastsession;
const check_data = outputArray;
const result_filter_data_json_lastsession = filterArray(array_current, check_data);

// console.log("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",result_filter_data_json_lastsession);


// console.log("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",outputArray);

filter_data_json = [...filter_data_json_currentsession, ...result_filter_data_json_lastsession];


return filter_data_json;
  }else if(kranthi_lastsession == 0){
    // console.log("pppppppppppppppppppppppppp","Working_equalto");
      for (var i = 0; i < kranthi_currentsession.length; i++) {
  var obj = kranthi_currentsession[i];
  var arrElement = [
    obj.bodypart,
    obj.musclename,
    obj.orientation,
    obj.exercisename,
    obj.maxangle,
    obj.maxemg,
    obj.numofreps,
    obj.minangle,
    obj.sessiontype
   
  ];
  filter_data_json.push(arrElement);
}
return filter_data_json;
  }

}





}


function formatDate2(dateString) {
  // Split the date string by '/'
  const dateParts = dateString.split('/');

  // Reorder the date parts and join them with '-'
  const formattedDate = dateParts[0] + '-' + dateParts[1] + '-' + dateParts[2];
  

  return formattedDate;
}



function calendar_adherence(helod_date, report_date, date_of_joining){
  let return_value = 0;
  let array_heldon_date = helod_date;
//   console.log("iiiiiiiiiiiiiiiiii",array_heldon_date.length);
  if(!array_heldon_date == 0){
//   console.log("iiiiiiiiiiiiiiiiii","working");
  let heldon_date_values_session =  array_heldon_date.map(function(x){return x.heldon.split(" ") [0]});
  let heldon_date_values_arr=[...new Set(heldon_date_values_session)];
  var report_date_adding = report_date;
  var dateObj = new Date(report_date_adding);
  var year = dateObj.getFullYear();
  var month = String(dateObj.getMonth() + 1).padStart(2, '0');
  var day = String(dateObj.getDate()).padStart(2, '0');
  var formattedDate = year + '-' + month + '-' + day;
  
  heldon_date_values_arr.push(formattedDate);
    var lastDate = heldon_date_values_arr[heldon_date_values_arr.length - 1]; // Get the last date from the array
    var currentDate = new Date(lastDate); // Get the current date
    var sixMonthsAgo = new Date(lastDate);
    sixMonthsAgo.setMonth(currentDate.getMonth() - 6); // Calculate the date six months ago
    var sixMonthsAgoTimestamp = sixMonthsAgo.getTime(); // Get timestamp

    var filteredArray = heldon_date_values_arr.filter(function(date) {
      var dateTimestamp = new Date(date).getTime(); // Get timestamp for each date
      return dateTimestamp >= sixMonthsAgoTimestamp;
    });

  
 
  return filteredArray.toString();

  }else{
    
    
    
       const inputDate = report_date;
      const dateObj = new Date(inputDate);
      const year = dateObj.getFullYear();
      const month = (dateObj.getMonth() + 1).toString().padStart(2, '0');
      const day = dateObj.getDate().toString().padStart(2, '0');
      
      const convertedDate = `${year}-${month}-${day}`;

    return convertedDate.toString();
  }
  
 

}

function calendar_adherence_appointed(helod_date, report_date, date_of_joining){
  let return_value = 0;
  let array_heldon_date = helod_date;
  let start_date_value;
  if(!array_heldon_date == 0){
  let heldon_date_values_session =  array_heldon_date.map(function(x){return x.heldon.split(" ") [0]});
  let heldon_date_values_arr=[...new Set(heldon_date_values_session)];
  var report_date_adding = report_date;
  var dateObj = new Date(report_date_adding);
  var year = dateObj.getFullYear();
  var month = String(dateObj.getMonth() + 1).padStart(2, '0');
  var day = String(dateObj.getDate()).padStart(2, '0');
  var formattedDate = year + '-' + month + '-' + day;
  heldon_date_values_arr.push(formattedDate);
    var lastDate = heldon_date_values_arr[heldon_date_values_arr.length - 1]; // Get the last date from the array
    
    var currentDate = new Date(lastDate); // Get the current date
    
    var sixMonthsAgo = new Date(lastDate);
    sixMonthsAgo.setMonth(currentDate.getMonth() - 6); // Calculate the date six months ago
    var sixMonthsAgoISOString = sixMonthsAgo.toISOString().slice(0, 10);

    // Filter the dates based on the comparison
    var filteredArray = heldon_date_values_arr.filter(function(date) {
      return date >= sixMonthsAgoISOString;
    });

    // console.log(filteredArray);
   

  
  start_date_value =  filteredArray;
  }else{
    start_date_value =  [report_date];
  }
  
  
  let start_value = start_date_value[0];
  function createArrayOfDates(startDate, numberOfDates) {
    const dateArray = [];
    const oneWeek = 7 * 24 * 60 * 60 * 1000; // One week in milliseconds
    const startDateObject = new Date(startDate);

    for (let i = 0; i < numberOfDates; i++) {
        dateArray.push(startDateObject.toISOString().substring(0, 10));
        startDateObject.setTime(startDateObject.getTime() + oneWeek);
    }

    return dateArray;
}

// Specify the start date (e.g., July 20, 2023) and the number of dates in the array
const startDate = start_value;
const numberOfDates = 37; // You requested an array of 37 dates

const dateArray = createArrayOfDates(startDate, numberOfDates);

return dateArray.toString();

}

function calendar_adherence_absent(helod_date, report_date, date_of_joining){
  let return_value = 0;
  let array_heldon_date = helod_date;
  let start_date_value;
  
  if(!array_heldon_date == 0){
  let heldon_date_values_session =  array_heldon_date.map(function(x){return x.heldon.split(" ") [0]});
  let heldon_date_values_arr=[...new Set(heldon_date_values_session)];
  var report_date_adding = report_date;
  var dateObj = new Date(report_date_adding);
  var year = dateObj.getFullYear();
  var month = String(dateObj.getMonth() + 1).padStart(2, '0');
  var day = String(dateObj.getDate()).padStart(2, '0');
  var formattedDate = year + '-' + month + '-' + day;
  heldon_date_values_arr.push(formattedDate);
    var lastDate = heldon_date_values_arr[heldon_date_values_arr.length - 1]; // Get the last date from the array
    
    var currentDate = new Date(lastDate); // Get the current date
    
    var sixMonthsAgo = new Date(lastDate);
    sixMonthsAgo.setMonth(currentDate.getMonth() - 6); // Calculate the date six months ago
    
    // Filter the array to include dates that are greater than or equal to six months ago
    var filteredArray = heldon_date_values_arr.filter(function(date) {
      return date >= sixMonthsAgo.toISOString().slice(0, 10);
    });

    // console.log(filteredArray);


  
  start_date_value =  filteredArray;
  }else{
    start_date_value =  [report_date];
  }
  
  
  let start_value = start_date_value[0];
  function createArrayOfDates(startDate, numberOfDates) {
    const dateArray = [];
    const oneWeek = 7 * 24 * 60 * 60 * 1000; // One week in milliseconds
    const startDateObject = new Date(startDate);

    for (let i = 0; i < numberOfDates; i++) {
        dateArray.push(startDateObject.toISOString().substring(0, 10));
        startDateObject.setTime(startDateObject.getTime() + oneWeek);
    }

    return dateArray;
}

// Specify the start date (e.g., July 20, 2023) and the number of dates in the array
const startDate = start_value;
const date1=new Date(startDate);
const date2=new Date(report_date);
const timeDiff = Math.abs(date2.getTime() - date1.getTime());
      
// Convert milliseconds to days
const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
let number_of_week = daysDiff/7;
const numberOfDates = number_of_week; // You requested an array of 37 dates

const dateArray = createArrayOfDates(startDate, numberOfDates);
const heldonDates_kt = start_date_value;
const appointDates_kt = dateArray;
const oneWeek = 7 * 24 * 60 * 60 * 1000; // One week in milliseconds

const result = appointDates_kt.map((appointDate) => {
const appointTimestamp = new Date(appointDate).getTime();

  // Check if any heldon date is within a week from the appoint date
  const hasHeldonWithinWeek = heldonDates_kt.some((heldonDate) => {
    const heldonTimestamp = new Date(heldonDate).getTime();
    return Math.abs(appointTimestamp - heldonTimestamp) < oneWeek;
  });

  return {
    date: appointDate,
    status: hasHeldonWithinWeek ? 'present' : 'absent',
  };
});
const absentDates = result.filter((item) => item.status === 'absent');
const absentDatesFinal = absentDates.map((item) => item.date);
const toDaysDate = new Date().toISOString().slice(0, 10);
const filterDatesArray = absentDatesFinal.filter(date => date <= toDaysDate);
return filterDatesArray.toString();

}

function calendar_adherence_status(helod_date, report_date, date_of_joining){
  let return_value = 0;
  let array_heldon_date = helod_date;
  let start_date_value;
  
  if(!array_heldon_date == 0){
  let heldon_date_values_session =  array_heldon_date.map(function(x){return x.heldon.split(" ") [0]});
  let heldon_date_values_arr=[...new Set(heldon_date_values_session)];
  
  var report_date_adding = report_date;
  var dateObj = new Date(report_date_adding);
  var year = dateObj.getFullYear();
  var month = String(dateObj.getMonth() + 1).padStart(2, '0');
  var day = String(dateObj.getDate()).padStart(2, '0');
  var formattedDate = year + '-' + month + '-' + day;
  heldon_date_values_arr.push(formattedDate);
    var lastDate = heldon_date_values_arr[heldon_date_values_arr.length - 1]; // Get the last date from the array
    
    var currentDate = new Date(lastDate); // Get the current date
    
    
    var sixMonthsAgo = new Date(lastDate);
    sixMonthsAgo.setMonth(currentDate.getMonth() - 6); // Calculate the date six months ago
    
    // Filter the array to include dates that are greater than or equal to six months ago
    var filteredArray = heldon_date_values_arr.filter(function(date) {
      return date >= sixMonthsAgo.toISOString().slice(0, 10);
    });

    // console.log(filteredArray);


  
  start_date_value =  filteredArray
  }else{
    start_date_value =  [report_date];
  }
  
  
  let start_value = start_date_value[0];
  function createArrayOfDates(startDate, numberOfDates) {
    const dateArray = [];
    const oneWeek = 7 * 24 * 60 * 60 * 1000; // One week in milliseconds
    const startDateObject = new Date(startDate);

    for (let i = 0; i < numberOfDates; i++) {
        dateArray.push(startDateObject.toISOString().substring(0, 10));
        startDateObject.setTime(startDateObject.getTime() + oneWeek);
    }

    return dateArray;
}

// Specify the start date (e.g., July 20, 2023) and the number of dates in the array
const startDate = start_value;
const numberOfDates = 37; // You requested an array of 37 dates

const dateArray = createArrayOfDates(startDate, numberOfDates);
const heldonDates_kt = start_date_value;
const appointDates_kt = dateArray;
const oneWeek = 7 * 24 * 60 * 60 * 1000; // One week in milliseconds

const result = appointDates_kt.map((appointDate) => {
const appointTimestamp = new Date(appointDate).getTime();

  // Check if any heldon date is within a week from the appoint date
  const hasHeldonWithinWeek = heldonDates_kt.some((heldonDate) => {
    const heldonTimestamp = new Date(heldonDate).getTime();
    return Math.abs(appointTimestamp - heldonTimestamp) < oneWeek;
  });

  return {
    date: appointDate,
    status: hasHeldonWithinWeek ? 'present' : 'absent',
  };
});
const absentDates = result.filter((item) => item.status === 'absent');
const absentDatesFinal = absentDates.map((item) => item.date);
// console.log("121212121212",absentDatesFinal)



}

function adherence(helod_date, report_date, date_of_joining){
  let return_value;
  let date_of_joining_data = date_of_joining;
  // Input date string
    var inputDate = date_of_joining_data;
    
    // Split the input date string into day, month, and year
    var dateArray = inputDate.split("-");
    var day = dateArray[0];
    var month = dateArray[1];
    var year = dateArray[2];
    
    // Format the date in "YYYY-MM-DD" format
    var new_start_formattedDate = year + "-" + month + "-" + day;
  let array_heldon_date = helod_date;
  let array_report_date = report_date;
  var dateObj = new Date(array_report_date);
  var year = dateObj.getFullYear();
  var month = String(dateObj.getMonth() + 1).padStart(2, '0'); // Months are zero-based
  var day = String(dateObj.getDate()).padStart(2, '0');
  var formattedDate = year + '-' + month + '-' + day;
   
  
    
  if(array_heldon_date != "0"){
  let heldon_date_values_session =  array_heldon_date.map(function(x){return x.heldon.split(" ") [0]})
  let heldon_date_values_arr=[...new Set(heldon_date_values_session)];
      heldon_date_values_arr.push(formattedDate);
      function removeDatesWithin7Days(arrayOfDates) {
          const dates = arrayOfDates.map(dateString => new Date(dateString));
        
          for (let i = 1; i < dates.length; i++) {
            const diffInMs = Math.abs(dates[i] - dates[i - 1]);
            const diffInDays = diffInMs / (1000 * 60 * 60 * 24);
        
            if (diffInDays < 7) {
              dates.splice(i, 1);
              i--; // Adjust the index after removal
            }
          }
        
          // Convert dates to formatted strings
          const formattedDates = dates.map(date => date.toISOString().split('T')[0]);
        
          return formattedDates;
        }
        
        // Example usage
        const dates = heldon_date_values_arr;
        const filteredDates = removeDatesWithin7Days(dates);
        
      
      let start_date =  filteredDates[0];
     
      let end_date = filteredDates[filteredDates.length - 1];
      const date1 = new Date(start_date);
      const date2 = new Date(end_date);

      // Calculate the time difference in milliseconds
      const timeDiff = Math.abs(date2.getTime() - date1.getTime());
      
      // Convert milliseconds to days
      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
      let number_of_week = daysDiff/7;
      
   
      let nummber_of_exersises = filteredDates.length;
      // console.log("111111111111111111111111111111111111111111",filteredDates);
      // console.log("111111111111111111111111111111111111111111",number_of_week);
      let percentage = nummber_of_exersises/number_of_week*100;
      
      if(percentage >= "100.00"){
        percentage = 100.00;
      }
      
      if(percentage == "Infinity"){
        percentage = 100.00;
      }
  return_value = Math.round(percentage);

  }else if(array_heldon_date == "0"){
    return_value = "100";
  }
  

  
  return return_value;

}


function hypermobility_no(current_session,arr2){
  let result = current_session.map(function(x) { return x.sessiondetails; });
  let arr = result.flat();
  const lastsession_array = arr2;
  const isAllZero = lastsession_array.every(item => item === 0);

  let Statments = "";
  let Statments_arr=[];

if(isAllZero == true){

  <!-- arr =getnewtable(arr); -->
  //arr = RemoveDupli(arr);
  
  <!-- if(isAllZero == "true"){} -->
  arr.map(function (x,i){
    
    <!-- Statments=""; -->
    if(x.exercisename == 'Isometric'){
      Statments = Statments +' ' ;
    }
  
    //Flexion Starts here 

    if(x.exercisename == 'Flexion'){

    

    if (x.musclename=='Deltoid'){
      normEMG = 680;
      EMG = Number(x.maxemg);
    
     let EMGval= Math.floor((EMG/normEMG) * 100) ;
     if (EMGval!=0){
     if (EMGval<100){
     Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
     }
     else {
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
     }
    }
  }

  if (x.musclename=='Flexor Carpi Radialis' ){
    normEMG = 108;
    EMG = Number(x.maxemg);


   let EMGval= Math.floor((EMG/normEMG) * 100);
   if (EMGval!=0 ){
   if (EMGval<100 ){
    Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
    }
    else {
     Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
    }
  }
  }

if (x.musclename=='Biceps'){
  normEMG = 236;
  EMG = Number(x.maxemg);

 let EMGval= Math.floor((EMG/normEMG)*100);
 if (EMGval!=0 ){
 if (EMGval<100){
  Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
  }
  else {
   Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
  }
}
}

if (x.musclename=='Tensor Fasciae Latae'){
  normEMG = 266;
  EMG = Number(x.maxemg);

 let EMGval= Math.floor((EMG/normEMG) * 100);
 if (EMGval!=0){
 if (EMGval<100){
  Statments = Statments +' The peak EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its ideal value.' ;  }
  else {
   Statments = Statments +' The peak EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
  }
}
}

if (x.musclename=='Spinalis Thoracis'){
  normEMG = 76;
  EMG = Number(x.maxemg);
 let EMGval= Math.floor((EMG/normEMG)*100);
 if (EMGval!=0 ){
 if (EMGval<100 ){
  Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
  }
  else {
   Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
  }
}
}

if (x.musclename=='Rectus Abdominis'  && x.bodypart=='Lumbar'){
  normEMG = 127;
  EMG = Number(x.maxemg);
  
 let EMGval= Math.floor((EMG/normEMG) * 100);
 if (EMGval!=0 ){
 if (EMGval<100 ){
  Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
  }
  else {
   Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
  }
}
}

if (x.musclename=='Rectus Abdominis' && x.bodypart=='Abdomen'){
  normEMG = 84;
  EMG = Number(x.maxemg);
  
 let EMGval= Math.floor((EMG/normEMG)*100);
 if (EMGval!=0 ){
 if (EMGval<100 ){
  Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
  }
  else {
   Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
  }
}
}


}


    // Flexion Ends here 

    // Extension Starts here 

    if(x.exercisename=='Extension')
    {

    if (x.musclename=='Latissimus Dorsi'){
      normEMG = 140;
      EMG = Number(x.maxemg);
    let EMGval= Math.floor((EMG/normEMG) * 100);
    if (EMGval!=0 ){
    if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }

    if (x.musclename=='Extensor Digitrum' ){
      normEMG = 303;
      EMG = Number(x.maxemg);
     let EMGval= Math.floor((EMG/normEMG) * 100);
     if (EMGval!=0){
     if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }

    if (x.musclename=='Triceps'){
      normEMG = 148;
      EMG = Number(x.maxemg);
     let EMGval= Math.floor((EMG/normEMG) * 100);
     if (EMGval!=0){
     if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }
    
    if (x.musclename=='Gluteus Maximus' ){
      normEMG = 134;
      EMG = Number(x.maxemg);
     let EMGval= Math.floor((EMG/normEMG) * 100);
     if (EMGval!=0){
     if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }
    
    if (x.musclename=='Rectus Femoris' ){
      normEMG = 100;
      EMG = Number(x.maxemg);
     let EMGval= Math.floor((EMG/normEMG) * 100);
     if (EMGval!=0){
     if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }
    
    if (x.musclename=='Spinalis Thoracis'){
      normEMG = 61;
      EMG = Number(x.maxemg);
     let EMGval= Math.floor((EMG/normEMG) * 100);
     if (EMGval!=0){
     if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }
    
    if (x.musclename=='Quadratus Lumborum'){
      normEMG = 63;
      EMG = Number(x.maxemg);
     let EMGval= Math.floor((EMG/normEMG) * 100);
     if (EMGval!=0){
     if (EMGval<100){
      Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
      }
      else {
       Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
      }
    }
    }

  }


    // Extension Ends here 
    

 

  if (x.musclename=='Deltoid' && x.exercisename=='Abduction'){
    normEMG = 708;
    EMG = Number(x.maxemg);
  let EMGval= Math.floor((EMG/normEMG) * 100);
  if (EMGval!=0){
  if (EMGval<100){
    Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
    }
    else {
     Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
    }
  }

  }

  if (x.musclename=='Pectoralis Major' && x.exercisename=='Adduction'){
    normEMG = 195;
    EMG = Number(x.maxemg);
  let EMGval= Math.floor((EMG/normEMG) * 100);
  if (EMGval!=0){
  if (EMGval<100){
    Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
    }
    else {
     Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
    }
  }

  }




if (x.musclename=='Supinator (Deep)' && x.exercisename=='Supination'){
  normEMG = 60;
  EMG = Number(x.maxemg);
 let EMGval= Math.floor((EMG/normEMG) * 100);
 if (EMGval!=0){
 if (EMGval<100){
  Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is '+  EMGval +' % of its normative value.' ;
  }
  else {
   Statments = Statments +' The EMG for ' + x.orientation +'  ' + x.musclename + '  '+ x.exercisename+ ' movement is healthy.' ;
  }
}
}


  var current_normal_rom=x.maxangleselected-x.minangleselected;

  if(x.exercisename!='Isometric'){

  

  if(((x.maxangle>0 && x.minangle>0)|| (x.maxangle<0 && x.minangle<0)) && (Math.abs(x.maxangle)>Math.abs(x.minangle)) ){
              
    var current_range_gained=Math.abs(x.maxangle)-Math.abs(x.minangle);

}

else{
    var current_range_gained=Math.abs(x.maxangle);
 
}

var current_ROMValue =  Math.floor((Number(current_range_gained)/Number(current_normal_rom) * 100));

if(current_ROMValue!=0){
  if (current_ROMValue>100){
    Statments = Statments + 'The joint mobility for '+ x.musclename + ' '+ x.exercisename+ ' movement is  healthy.';
  }
  else{
Statments = Statments + 'The joint mobility for '+ x.musclename + ' '+ x.exercisename+ ' movement is '+ current_ROMValue+" % of its healthy value. ";
  }
  }
}

Statments_arr.push(Statments);
Statments="";

}
)


return Statments_arr; 

 
}else {
  return Statments_arr;
}

}
  %>



<% if (typeof details === 'string' ) { %>
<h2><%=details %></h2>
<%} else if ( report[0].sessiondetails.length < 1 ){%>
<h2>no records for today</h2>
<%} else {%> <%const getPainScale = scale => {for (let i = 1; i <= 5; i++) {%>
<% if(scale == i) { %>
<img
  src="/icons/<%= i %>.png"
  style="background-color: yellow; border-radius: 100%"
/>
<% } else { %>
<img
  src="/icons/<%= i %>.png"
  style="background-color: white; border-radius: 50%"
/>
<% } %> <%}};%> <%const getMMTGrading = grade => {for(var i=1; i <= 9; i++) {
var x = i;
var y = parseInt(grade.substring(0,1));
var length = grade.length;
if(y==1 && length==1){
  y=1;
}
else if(y==1 && length>1){
  y=2;
}
else if(length>1){
  y=y*2;
}
else{
  y=y+(y-1);
}
if(x!=1){
  if(x%2==0){x=x/2;}
  else{x=Math.round((x/2));}
}
%> <% if((grade.toString().substring(0,1).toLowerCase() === x.toString().toLowerCase()) && i==y) { %>
<span
  style="border: 1px #aaa solid; border-radius: 60%; padding: 0px; background-color: yellow;"
  >&nbsp;<% if((i%2==0 && i>1) || i==2){%><%=x+"+"%><%} else if(i>1){%><%=x%><%}else{ %><%=x%><%}%>&nbsp;</span
>
<% } else { %>
<span
  style="border: 1px #aaa solid; border-radius: 60%; padding: 0px;  background-color: white;"
  >&nbsp;<% if((i%2==0 && i>1) || i==2){%><%=x+"+"%><%} else if(i>1){%><%=x%><%}else{ %><%=x%><%}%>&nbsp;</span
>
<% } %> <% } }%>
<html>
  <head>
    <link rel="stylesheet" href="/stylesheets/style_new.css" />
    <link rel="stylesheet" href="/stylesheets/main.css" />
    <link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'>
    <link href="https://fonts.googleapis.com/css?family=Ebrima" rel="stylesheet">
    <script src="https://www.amcharts.com/lib/4/core.js"></script>
    <script src="https://www.amcharts.com/lib/4/charts.js"></script>
    <script src="https://www.amcharts.com/lib/4/themes/animated.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/gh/emn178/chartjs-plugin-labels/src/chartjs-plugin-labels.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="https://www.gstatic.com/charts/loader.js"></script>


<script type="text/javascript" src="/loading-bar.js"></script>
<link rel="stylesheet" type="text/css" href="/loading-bar.css"/>
<!--Rating Library-->

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">



  </head>
  <style>
      .checked {
        color: #44C02F !important;
    }
    
    .unchecked {
        color: rgb(176, 198, 217) !important;
    }  

   canvas{

width:100pt !important;
height:100pt !important;

}

</style>
  <body style = "background-color:#ffffff">

    <div class="page">
      <div class="header"></div>

      <div class = "report_title" style="background-color:white !important;width: 100%;height: 158px;margin-top:30px;">

        <!-- Logo borders -->
        <div id ="borders" style="width: 105.19pt;height: 105.19pt;position: absolute;top:22.53pt;left: 22.98pt;border: 2px solid #062545 !important;border-radius: 40px;"></div>

        <div id ="borders" style="width: 105.19pt;height: 105.19pt;position: absolute; top:22.53pt;right:22.98pt;border: 2px solid #062545 !important;border-radius: 40px;"></div>

  
        <!-- Logos -->
         <% if ( details[0].cliniclogo!= null ) { %>
        <img src="<%= details[0].cliniclogo%>" style="position: absolute; width:81pt; height:77pt;top:35pt;left:36pt">
         <%} else {%>
         <img src="/icons/SVG/Defaultlogo.svg" style="position: absolute; width:81pt; height:77pt;top:35pt;left:36pt">
         <%} %> 
        <img src="/icons/Pheezee_logo1.png" style="position: absolute; width:50.69pt; height:67.4pt ;top:35pt;right:50pt">
        <img src="/icons/Pheezee_logo2.png" style="position: absolute; width:60.89pt; height:9.46pt ;top:107pt;right:46pt;">


        <!--Heading WORK on Phone number -->
        <div id="heading-title-box" style="height:90%;width:58.6%;position:relative;left:21%;top:-5%;">
          <% if (  typeof(details[0].clinicname) === "undefined" ) { %>
        <p style="color:#062545 !important;position:relative;text-align: center;font-size:16pt; font-family: 'Avenir';top:4pt;">*Update clinic name*</p>
         <%} else {%>
         <p style="color:#062545 !important;position:relative;text-align: center;font-size:16pt; font-family: 'Avenir';top:4pt;"><%= details[0].clinicname %></p>
         <%} %> 
          
          <p style="color:#062545 !important;position:relative;text-align: center;font-size:11pt; font-family: 'Avenir';padding-right:5pt;padding-left:0pt;top:18pt;"><%=details[0].address %></p>
          <p style="color:#062545 !important;position:relative;text-align: center;font-size:10pt; font-family: 'Avenir';padding-right:20pt;padding-left:20pt;top:30pt;">Dr. <%=details[0].phizioname%>, <%=details[0].degree%></p>
          <p style="color:#062545 !important;position:relative;text-align: center;font-size:10pt; font-family: 'Avenir';padding-right:20pt;padding-left:20pt;top:30pt;">Ph : <%=details[0].phiziophone%></p>
  
        </div>
        <!-- Heading end -->

        <!-- <div id ="borders" style="width:100%;height: 5pt;position: absolute; top:138.01pt;background-color: #D4D4D4 !important;"></div> -->

      </div>

     


      <!-- </div> -->

      <div style=" top: 195px;height: 23px;width: 100%;left: 0px;border-radius: 0px;background-color: rgba(32, 123, 190, 1);position: absolute;display: flex;justify-content: space-between;padding: 0 6px 0;box-sizing: border-box;">
      
        <p style=" font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #ffffff;line-height: 0;margin: auto 0;width: auto;">Session Date: <%= new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' ')%>, <%= new Date(report[0].sessiondetails[0].heldon).toDateString().substring(0,3)%>, <%=calcTime()%></p>
        <p style=" font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #ffffff;line-height: 0;margin: auto 0;width: auto;">Session no: <%= sessionNo %></p>
        <p style=" font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #ffffff;line-height: 0;margin: auto 0;width: auto;">Session Duration: <%= getTotalSessionTime()%></p>
        <p style=" font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #ffffff;line-height: 0;margin: auto 0;width: auto;">Start Session: <%=details[0].phiziopatients[0].dateofjoin
          %></p>
        <p style=" font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #ffffff;line-height: 0;margin: auto 0;width: auto;">Last Session: <%= get_date()%></p>
      </div>



      <div class="patient_summary"  style="  position: absolute; width:100%; height: auto; left: 0px; top: 220px; border-bottom: 1.5px solid #cdcdcd; padding: 13px 6px 0; box-sizing: border-box; display: grid; grid-template-rows: 15px 1fr 1fr 15px; grid-template-columns: 80px 1fr 200px 1fr 150px; column-gap: 12px; row-gap: 8px;">
        <div id="patient-image-container" style=" grid-row-start: 1; grid-column-start: 1; grid-row-end: 5; grid-column-end: 2;">
        <div id="patient-image" style="  box-sizing: border-box; position: absolute; width: 60px; height: 60px;  #000000; border-radius: 10.7143px;">
          <% if ( details[0].phiziopatients[0].patientprofilepicurl!= "empty" ) { %>
            <img src="<%= "https://s3.ap-south-1.amazonaws.com/pheezee/" + details[0].phiziopatients[0].patientprofilepicurl%>" style="border-radius: 64px; width:60px; height:60px; margin-left:0.5rem">
             <%} else {%>
             <img src="/icons/default-patient.png">
             <%} %>
            </div>
        </div>
        <div id="patient-name" style="  grid-row-start: 1;grid-column-start: 2;grid-row-end: 2;grid-column-end: 4;">
        <p class="patient-detail-name" style="font-family: 'Roboto';font-style: normal;font-weight: 500;font-size: 9.75px;color: #2C2B2B;margin: auto 0;"> <%if(details[0].phiziopatients[0].patientgender.toLowerCase() == 'male' || details[0].phiziopatients[0].patientgender.toLowerCase() == 'm'){%>Mr. <%}else {%> Ms. <%}%> <%= get_name(details[0].phiziopatients[0].patientname)%>, <%=patientage(get_name(details[0].phiziopatients[0].patientage)) %>/<%=details[0].phiziopatients[0].patientgender.slice(0,1) %></p>
        </div>
        <div id="patient-phone" style=" grid-row-start: 2;grid-column-start: 2;grid-row-end: 3;grid-column-end: 3;">
        <p class="patient-detail-up" style=" font-family: 'Roboto';font-style: normal;font-weight: 500;font-size: 9.2px;color: #AEACAC;margin: auto;">Phone no:<br>
          <span class="patient-detail-down" style="font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #2C2B2B;"><%=details[0].phiziopatients[0].patientphone %></span>
        </p>
        </div>
        <div id="patient-mail" style="  grid-row-start: 2;grid-column-start: 3;grid-row-end: 3;grid-column-end: 4;">
        <p class="patient-detail-up" style=" font-family: 'Roboto';font-style: normal;font-weight: 500;font-size: 9.2px;color: #AEACAC;margin: auto;">Mail ID:<br>
          <span class="patient-detail-down" style="font-family: 'Roboto';font-style: normal;font-weight: 400;font-size: 9.2px;color: #2C2B2B;"><%=details[0].phiziopatients[0].patientemail %></span>
        </p>
        </div>
        <div id="patient-condition" style="  grid-row-start: 2; grid-column-start: 4; grid-row-end: 3; grid-column-end: 5;">
        <p class="patient-detail-up" style=" font-family: 'Roboto';font-style: normal;font-weight: 500;font-size:9.2px;color: #AEACAC;margin: auto;">Condition:<br>
          <span class="patient-detail-down" style="font-family: 'Roboto';font-style: normal;font-weight: 400;font-size:9.2px;color: #2C2B2B;"><%=details[0].phiziopatients[0].patientcondition %></span>
        </p>
        </div>
        <div id="patient-speciality" style=" grid-row-start: 2; grid-column-start: 5; grid-row-end: 3; grid-column-end: 6;">
        <p class="patient-detail-up"style=" font-family: 'Roboto';font-style: normal;font-weight: 500;font-size:9.2px;color: #AEACAC;margin: auto;">Speciality:<br>
          <span class="patient-detail-down" style="font-family: 'Roboto';font-style: normal;font-weight: 400;font-size:9.2px;color: #2C2B2B;"><%=details[0].phiziopatients[0].patientcasedes %></span>
        </p>
        </div>
        <div id="patient-side" style="  grid-row-start: 3; grid-column-start: 2; grid-row-end: 4; grid-column-end: 3;">
        <p class="patient-detail-up" style=" font-family: 'Roboto';font-style: normal;font-weight: 500;font-size:9.2px;color: #AEACAC;margin: auto;">Affected side:<br>
          <span class="patient-detail-down" style="font-family: 'Roboto';font-style: normal;font-weight: 400;font-size:9.2px;color: #2C2B2B;"><%=details[0].phiziopatients[0].patientinjured %></span>
        </p>
        </div>
        <div id="patient-history" style=" grid-row-start: 3;grid-column-start: 3;grid-row-end: 4;grid-column-end: 4;">
        <p class="patient-detail-up" style=" font-family: 'Roboto';font-style: normal;font-weight: 500;font-size:9.2px;color: #AEACAC;margin: auto;">Medical History:<br>
          <span class="patient-detail-down" style="font-family: 'Roboto';font-style: normal;font-weight: 400;font-size:9.2px;color: #2C2B2B;"><%=details[0].phiziopatients[0].patienthistory %></span>
        </p>
        </div>
        <div id="patient-id" style="  grid-row-start: 4;grid-column-start: 5;grid-row-end: 5;grid-column-end: 6;display: flex;justify-content: flex-end;">
        <p class="patient-detail-id" style=" font-family: 'Roboto'; font-style: normal; font-weight: 400; font-size: 7px; color: #2D2D2D; margin: auto 0;">Patient ID: <%= details[0].phiziopatients[0].patientid %></p>
        </div>

      </div>


<!--Code testsing-->
<style>
    .containerkt {
      margin-top:140px;
        height: 90px;
        display: flex;
        position:absolute;
    }

    .section1kt {
        width: 20%;
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .section2kt {
        margin-top:20px;
        width: 80%;
      
    }
     #piechart {
        position: relative;
        top:50px;
        bottom: 10px;
        right: 3px;
    }

  
</style>

<div class="containerkt">
  
  
     <div class="section1kt" style = "position:relative; left:0px; bottom:40px">
       <output id="pievalue" style="display:none"><%=adherence(session_array_values, new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' '),formatDate2(details[0].phiziopatients[0].dateofjoin))%></output>
     <b style= "position:relative;top:180px;font-Size:14px;right:5px;">Adherence</b>
     
      <div id="piechart"></div>
      <script type="text/javascript">
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);
  
        function drawChart() {
          
          let pie_value = document.getElementById("pievalue");
          let pie_number = pie_value.value;
              pie_number = Number(pie_number)
          let total = 100 - pie_number;
          var data = google.visualization.arrayToDataTable([
            ['Task', 'Hours per Day'],
            ['Work',     pie_number],
            ['Eat',      total],
          ]);
  
          var options = {
              legend: 'none',
              width: "100",
              height:"100",
              pieHole: 0.8,
            colors: ['#207BBE', '#a9a9a9' ],
            is3D: false,
              pieSliceText: 'none',
              pieSliceBorderColor: '#a9a9a9',
              enableInteractivity: false,
              chartArea: {
                  left: "3%",
                  top: "3%",
                  height: "94%",
                  width: "94%",
                  backgroundColor: 'transparent'
              },
  
          };
  
          var chart = new google.visualization.PieChart(document.getElementById('piechart'));
  
          chart.draw(data, options);
        }
        
      </script>

  
          <p style="font-family: 'Roboto';
          font-style: normal;
          font-weight: 700;
          font-size: 18px;
          line-height: 19px;
          display: flex;
          align-items: center;
          text-align: center;
          color: #207BBE;position:relative; bottom:9px;right:2px;"><%=adherence(session_array_values,new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' '),formatDate2(details[0].phiziopatients[0].dateofjoin))%>%</p>  
          <!--<p style="font-family: 'Roboto';-->
          <!--font-style: normal;-->
          <!--font-weight: 600;-->
          <!--font-size: 13px;-->
          <!--line-height: 12px;-->
          <!--display: flex;-->
          <!--align-items: center;-->
          <!--text-align: center;-->
          <!--color: #002647;position:relative; top:10px;right:28px;">Adherence</p> -->
    </div>
     <div class="section2kt">
     <output id="adherence_new_kranthi" style="display:none"><%=calendar_adherence(session_array_values, new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' '),formatDate2(details[0].phiziopatients[0].dateofjoin))%></output>
      <output id="adherence_new_appotiment_dates" style="display:none"><%=calendar_adherence_appointed(session_array_values, new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' '),formatDate2(details[0].phiziopatients[0].dateofjoin))%></output>
       <output id="adherence_new_absent_dates" style="display:none"><%=calendar_adherence_absent(session_array_values, new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' '),formatDate2(details[0].phiziopatients[0].dateofjoin))%></output>
       <output id="adherence_new_status" style="display:none"><%=calendar_adherence_status(session_array_values, new Date(report[0].sessiondetails[0].heldon).toDateString().split(' ').slice(1).join(' '),formatDate2(details[0].phiziopatients[0].dateofjoin))%></output>
       <div class="year"></div>
      <div id="calendar" style="background-color: #FFFFFF; position:relative; right:0px;"></div>
       <b style= "position:relative;top:10px;left:150px;font-size: 10.16px;color: #707070;font-weight: 500;">Attended all sessions for a faster recovery</b>
<style>
    #calendar {
      display: flex;
    }

    .month {
      margin-right: 12px;
      text-align: center;
    }

    .table {
      display: table;
      border-collapse: collapse;
    }

    .year {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 16px;
            font-size: 10px;
            font-weight: bold;
            color: #999999;
    }

    .row {
      display: table-row;
    }

    .square {
      display: table-cell;
      text-align: center;
      width: 10px; 
      height: 10px; 
      padding: 2px;
      background-color: rgb(255, 255, 255);
    }

    .date {
      display: flex;
      width: 10px;
      height: 10px;
      border-radius: 50%;
      justify-content: center;
      align-items: center;
      font-weight: bold;
      font-size: 6px;
      line-height: normal;
    }

    .present {
      width: 12px; 
      height: 12px; 
      background-color: #207BBE;
      color: white;
    }

    .absent {
      width: 12px; 
      height: 12px; 
      background-color: white;
      color:#CC2016;
    }

    .default {
      background-color: #F2F2F2;
      color: #F2F2F2;
    }

    .appointed {
      width: 12px; 
      height: 12px; 
      background-color: #F2F2F2;
      color: #707070;
    }

    .emoji-container {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-top: 6px;
      margin-bottom: 6px;
    }

    .emoji {
      width: 8.2px; /* Adjust the dimensions as per your requirements */
      height: 8.2px; /* Adjust the dimensions as per your requirements */
      margin-right: 5px;
    }

    .month-name {
      font-weight: bold;
      font-family: 'Times New Roman', Times, serif;
      font-size: 7.2px;
    }

    .green-text {
      color: green;
    }

    .red-text {
      color: red;
    }

    .grey-text {
      color: grey;
    }
  </style>
    
  <script>
    let held_on_date = document.getElementById("adherence_new_kranthi");
    let held_on_date_value = held_on_date.value;

    let appointed_on_date = document.getElementById("adherence_new_appotiment_dates");
    let appointed_on_date_value = appointed_on_date.value; 
    let absent_on_date = document.getElementById("adherence_new_absent_dates");
    let absent_on_date_value = absent_on_date.value;
    //     // Convert held_on_date_value string into an array
    let arrayindexvalue = held_on_date_value.split(',');
    let arrayindexvalue_appointed = appointed_on_date_value.split(',');
    let arrayindexvalue_absent = absent_on_date_value.split(',');
    
    
        const calendar = document.getElementById("calendar");
        const HealdonDateArray = arrayindexvalue;
        const AppointedDateArray = arrayindexvalue_appointed;
        const AbsentDateArray = arrayindexvalue_absent;

        // Function to check if a date is in the HealdonDateArray
        function isHealdonDate(date) {
            return HealdonDateArray.includes(date);
        }
        function isAppointedDate(date) {
            return AppointedDateArray.includes(date);
        }
        function isAbsentdDate(date) {
            return AbsentDateArray.includes(date);
        }

        function createDateElement(date, status) {
            const squareElement = document.createElement("div");
            squareElement.classList.add("square");

            const dateElement = document.createElement("div");
            dateElement.classList.add("date");
            dateElement.textContent = date;

            if (status === 1) {
                dateElement.classList.add("present");
            } else if (status === 0) {
                dateElement.classList.add("absent");
            } else if (status === 2) {
                dateElement.classList.add("appointed");
            } else {
                dateElement.classList.add("default");
            }

            squareElement.appendChild(dateElement);

            return squareElement;
        }

        // Function to create the emoji container
        function createEmojiContainer(monthName, hasAbsent, greyColor) {
            const emojiContainer = document.createElement("div");
            emojiContainer.classList.add("emoji-container");

            const emojiImage = document.createElement("img");
            emojiImage.classList.add("emoji");
            emojiImage.src = hasAbsent ? "/ads_img/emoji2.svg" : "/ads_img/emoji1.svg";
            emojiContainer.appendChild(emojiImage);

            const monthNameElement = document.createElement("span");
            monthNameElement.classList.add("month-name");
            monthNameElement.textContent = monthName;
            emojiContainer.appendChild(monthNameElement);

             if (hasAbsent) {
                emojiContainer.classList.add("red-text");
            } else {
                emojiContainer.classList.add("green-text");
            }
            
            if (greyColor) {
                emojiImage.src = hasAbsent ? "" : "";
                emojiContainer.appendChild(emojiImage);
                emojiContainer.classList.add("grey-text");
            }

            return emojiContainer;
        }

        function createMonth(monthName, startDate, index, FirstDate,startYear,enddate) {
            const currentDate = new Date(startDate);
            const currentMonth = currentDate.getMonth();
            const currentYear = currentDate.getFullYear();
            var flag = false;
            const firstDayOfMonth = new Date(currentYear, currentMonth, 1);
            const firstDayOfWeek = firstDayOfMonth.getDay(); // 0 (Sunday) to 6 (Saturday)
            const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate();
            const monthElement = document.createElement("div");
            monthElement.classList.add("month");
            const todaysMonth = new Date(enddate).getMonth();
              // const emojiContainer = createEmojiContainer(monthName, true);
              // monthElement.appendChild(emojiContainer);

            const tableElement = document.createElement("div");
            tableElement.classList.add("table");
            const assignedWeekday = firstDayOfWeek; // Assign the first day of the month as the assigned weekday
            const MarkDate = FirstDate;
            let rowElement = document.createElement("div");
            rowElement.classList.add("row");

            for (let i = 0; i < firstDayOfWeek; i++) {
                const placeholderElement = document.createElement("div");
                placeholderElement.classList.add("square");
                rowElement.appendChild(placeholderElement);
            }

            for (let i = 1; i <= daysInMonth; i++) {
                let dateStatus = -1;
                const currentWeekday = (i + firstDayOfWeek - 1) % 7;

                const dateString = `${currentYear}-${String(currentMonth + 1).padStart(2, '0')}-${String(i).padStart(2, '0')}`;
                 if (isAppointedDate(dateString)) {
                    dateStatus = 2; // Marked as "Present"
                }
                if (isHealdonDate(dateString)) {
                    dateStatus = 1; // Marked as "Present"
                }
               
                if (isAbsentdDate(dateString)) {
                    dateStatus = 0; // Marked as "Present"
                    // const emojiContainer = createEmojiContainer(monthName, true);
                    // monthElement.appendChild(emojiContainer);
                    flag=true;
                }
            
                const squareElement = createDateElement(i, dateStatus);
                rowElement.appendChild(squareElement);

                if (rowElement.childElementCount === 7) {
                    tableElement.appendChild(rowElement);
                    rowElement = document.createElement("div");
                    rowElement.classList.add("row");
                }
            }
            if (flag) {
                    if (currentMonth > todaysMonth ) {
                    // console.log(todaysMonth, currentMonth);
                    if(startYear==currentYear){
                      const emojiContainer = createEmojiContainer(monthName, true, false);
                      monthElement.appendChild(emojiContainer);
                    }
                    else{
                      const emojiContainer = createEmojiContainer(monthName, false, true);
                    monthElement.appendChild(emojiContainer);
                    }
                }
                else {
                  // console.log("111111111111111111111111111111111111111",startYear)
                    if(startYear!=currentYear){
                      const emojiContainer = createEmojiContainer(monthName, true, false);
                      monthElement.appendChild(emojiContainer);
                    }
                    else{
                      const emojiContainer = createEmojiContainer(monthName, true, false);
                    monthElement.appendChild(emojiContainer);
                    }
                    
                }
            }
            else {
              
              if (currentMonth > todaysMonth ) {
                    // console.log(todaysMonth, currentMonth);
                    if(startYear==currentYear){
                      const emojiContainer = createEmojiContainer(monthName, false, true);
                      monthElement.appendChild(emojiContainer);
                    }
                    else{
                      const emojiContainer = createEmojiContainer(monthName, false, false);
                    monthElement.appendChild(emojiContainer);
                    }
                }
                else {
                  
                    if(startYear!=currentYear){
                      const emojiContainer = createEmojiContainer(monthName, false, true);
                      monthElement.appendChild(emojiContainer);
                    }
                    else{
                      const emojiContainer = createEmojiContainer(monthName, false, false);
                    monthElement.appendChild(emojiContainer);
                    }
                    
                }

            }
            //     if (flag) {
            //     if (currentMonth > todaysMonth) {
            //         console.log("qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq",todaysMonth, currentMonth);
            //         const emojiContainer = createEmojiContainer(monthName, true, false);
            //         monthElement.appendChild(emojiContainer);
            //     }
            //     else {
            //         const emojiContainer = createEmojiContainer(monthName, true, false);
            //         monthElement.appendChild(emojiContainer);
            //     }
            // }
            // else {
            //     if (currentMonth > todaysMonth) {
            //         console.log(todaysMonth, currentMonth);
            //         const emojiContainer = createEmojiContainer(monthName, false, true);
            //         monthElement.appendChild(emojiContainer);
            //     }
            //     else {
            //         const emojiContainer = createEmojiContainer(monthName, false, false);
            //         monthElement.appendChild(emojiContainer);
            //     }

            // }
            if (rowElement.childElementCount > 0) {
                tableElement.appendChild(rowElement);
            }

            monthElement.appendChild(tableElement);

            return monthElement;
        }

        function createCalendar(startDate,enddate) {
            const months = 6; // Number of months to display
            const currentDate = new Date(startDate).getDate();
            // console.log(startDate)
            let currentMonth = new Date(startDate).getMonth();
            let currentYear = new Date(startDate).getFullYear();
            let StartYear = new Date(startDate).getFullYear();
            const yearElement = document.querySelector(".year");
            let CurrentYear1=currentYear;
            const firstDayOfMonth = new Date(currentYear, currentMonth, currentDate);
            const firstDayOfWeek = firstDayOfMonth.getDay();
            // console.log("22222222222222222222222222222222",StartYear);
            for(var i=0;i<HealdonDateArray.length;i++){
                const currenYearInner = new Date(HealdonDateArray[i]).getFullYear();
               
                if(currentYear!= currenYearInner){
                    CurrentYear1=CurrentYear1+" - "+currenYearInner;
                    // console.log(CurrentYear1)
                    break;
                }
                
                
            }
            yearElement.textContent = CurrentYear1;
            // Loop to create each month
            for (let i = 0; i < months; i++) {
                const monthName = new Date(currentYear, currentMonth, 1).toLocaleString('default', { month: 'long' });
                const monthElement = createMonth(monthName, new Date(currentYear, currentMonth, currentDate), i, firstDayOfWeek,StartYear,enddate);
                calendar.appendChild(monthElement);

                currentMonth++;
                if (currentMonth === 12) {
                    currentMonth = 0;
                    currentYear++;
                }
            }
        }


        const startDate = new Date(HealdonDateArray[0]);
        const enddate=new Date(HealdonDateArray[HealdonDateArray.length-1])
        // console.log(enddate);
        createCalendar(startDate,enddate);
    </script>
    </div>
 
   
</div>
      <output id="myElementwo" style = "display:none;"><%= details[0].phiziopatients[0].patientinjured %></output>
      <output id="myElementone" style = "display:none;"><%= details[0].phiziopatients[0].patientgender.toLowerCase() %></output>
      <output id="myElement" style = "display:none;"><%= report_new_page(report[0].sessiondetails,lastsession_array_new_filter_kranthi,details[0].phiziopatients[0].patientinjured) %></output>

          
      
      <div style = "position: absolute;top:512px;left:20px;">
         <div class="subpage1" style="background-color: #ffffff;">
      
      <div id="add-cont"
                style="display: flex; flex-direction: row; align-items: center; justify-content: space-between ;padding: 0px;  width: inherit; height: 19px;position:relative; left: 0px;top:30pt;">
            
                <div class="add-col" style="width: 330px; height: 0px; border: 3px solid #CDCDCD;"></div>
                <div id="add-name"
                    style=" font-family: 'Avenir';  font-weight: 700; font-size: 20px; line-height: 19px; color: #000000; letter-spacing: 0px;"><b>Progress</b>
                  </div>
                <div class="add-col" style="width: 350px; height: 0px; border: 3px solid #CDCDCD;"></div>
            
            </div>
              
                <div style = "float: left"class = "topleft">

                      <img style="position: relative;top:4.188pt;left:6.823pt;"; class = "icontoprom" src="/icons/icons/Rom grey.png" alt="">
                        <b style="color:#B5B5B5; position: relative;top:2.823pt;left:13.647pt;">ROM</b>
                        <img style="position: relative;top:8.188pt;left:40.941pt;" class = "icontopemg" src="/icons/icons/Emg grey.png" alt="">
                        <b style="color:#B5B5B5;position: relative;top:2.823pt;left:47.7647pt;">EMG</b>
                        <img style="position: relative;top:4.188pt;left:75.0588pt;" class = "icontoppoor" src="/icons/icons/Poor Endurance grey.png" alt="">
                        
                        <b style = "color:#B5B5B5;position: relative;top:2.823pt;left:81.8823pt;">Poor Endurance</b>
                </div>

                <div style = "float: right"class = "topright">
                  <img style="Position:relative;top:7.188pt;left:10.094pt;max-height: 9.211pt;" class = "icontop" src="/icons/icons/Excellent.png" alt="">
                        <b style="Position:relative;top:4.823pt;left:13.188pt;color:#44C02F; ">Excellent</b>
                        <img style="Position:relative;top:7.188pt;left:25.282pt;max-height: 9.211pt" class = "icontop" src="/icons/icons/Good.png" alt="">
                        <b style="Position:relative;top:4.823pt;left:28.87pt;color:#44C02F; ">Good</b>
                        <img style="Position:relative;top:7.188pt;left:42.47pt;max-height: 9.211pt" class = "icontop" src="/icons/icons/Fair.png" alt="">
                        
                        <b style=" Position:relative;top:4.823pt;left:44.56pt;color:#E6A000; ">Fair</b>
                        <img style="Position:relative;top:7.188pt;left:57.658pt;max-height: 9.211pt" class = "icontop" src="/icons/icons/Needs Attention.png" alt="">
                         <b style="Position:relative;top:4.823pt;left:60.7529pt; color:#cc2016;">Poor</b>
                        <!--<b style="Position:relative;top:4.823pt;left:60.7529pt; color:#cc2016;">Need Attention</b>-->
                </div>
                <!-- //dot code -->
                <div class="con dot dot1"><div class = "d1 abc"></div></div>
                <div class="con dot dot2"><div class = "d2 abc"></div> </div>
                <div class="con dot dot3"><div class = "d3 abc"></div></div>
                <div class="con dot dot4"><div class = "d4 abc"></div></div>
                <div class="con dot dot5"><div class = "d5 abc"></div></div>
                <div class="con dot dot6"><div class = "d6 abc"></div></div> 
                <div class="con dot dot7"><div class = "d7 abc"></div></div>
                <div class="con dot dot8"><div class = "d8 abc"></div></div>
                <div class="con dot dot9"><div class = "d9 abc"></div></div>
                <div class="con dot dot10"><div class = "d10 abc"></div></div>
                <div class="con dot dot11"><div class = "d11 abc"></div></div>
                <div class="con dot dot12"><div class = "d12 abc"></div></div> 
                <div class="con dot dot13"><div class = "d13 abc"></div></div>
                <div class="con dot dot14"><div class = "d14 abc"></div></div>
                <!-- line code  -->

                
                <div class = "line line1a"> </div>
                <div class = "line line1b"> </div>
                <div class = "line line2a"> </div>
                <div class = "line line2b"> </div>
                <div class = "line line3a"> </div>
                <div class = "line line3b"> </div>
                <div class = "line line4a"> </div>
                <div class = "line line4b"> </div>
                <div class = "line line5a"> </div>
                <div class = "line line5b"> </div>
                <div class = "line line6a"> </div>
                <div class = "line line6b"> </div>
                <div class = "line line7a"> </div>
                <div class = "line line7b"> </div>
                <div class = "line line8a"> </div>
                <div class = "line line8b"> </div>
                <div class = "line line9a"> </div>
                <div class = "line line9b"> </div>
                <div class = "line line10a"> </div>
                <div class = "line line10b"> </div>
                <div class = "line line11a"> </div>
                <div class = "line line11b"> </div>
                <div class = "line line12a"> </div>
                <div class = "line line12b"> </div>
                <div class = "line line13a"> </div>
                <div class = "line line13b"> </div>
                <div class = "line line14a"> </div>
                <div class = "line line14b"> </div>
                
                <img class = "fit" src="/icons/images/Male Bilateral body part.png" />
                <div class = "belowright" style = "position:absolute; bottom:12.7pt;left:156.94pt;font-size:10.91px;"></div>
                <div class = "belowleft" style = "position:absolute; bottom:12.7pt;right:167.41pt;font-size:10.91px;"></div>

                <div class="box box-postion1">
                    
                    <div class = "box1a innerbox1">
                        <div style = "float:left" class = "box1ai">
                            
                        </div>
                       
                    </div>
                    <div class = "box1b innerbox2r">
                    </div>
                </div>

                <div class="box box-postion2">
                    <div class = " box2a innerbox1">
                        <div style = "float: right" class = "box2ai">
                            
                        </div>
                    </div>
                    <div class = "box2b innerbox2l"> 
                        
                    </div>
                </div>

                <div class="box box-postion3">
                    <div class = "box3a innerbox1">
                        <div style = "float:left" class = "box3ai">
                            
                        </div>
                    </div>
                    <div class = " box3b innerbox2r">
                        
                    </div>
                    
                </div>

                <div class="box box-postion4">
                    <div class = "box4a innerbox1">
                        <div style = "float:right" class = "box4ai">
                        </div>
                    </div>
                    <div class = "box4b innerbox2l">

                    </div>
                </div>
                <div class="box box-postion5">
                    <div class = "box5a innerbox1">
                        <div style = "float:left" class = "box5ai">
                            
                        </div>
                    </div>
                    <div class = "box5b innerbox2r">
                       
                    </div>
                </div>

                <div class="box box-postion6">
                    <div class = "box6a innerbox1">
                        <div style = "float:right" class = "box6ai">
                            
                        </div>
                    </div>
                        <div class = "box6b innerbox2l">

                        </div>
                </div>
                <div class="box box-postion7">
                    <div class = "box7a innerbox1">
                        <div style = "float:left" class = "box7ai">
                            
                        </div>
                    </div>
                    <div class = "box7b innerbox2r">
                    </div>
                </div>

                <div class="box box-postion8">
                    <div class = "box8a innerbox1">
                        <div style = "float:right" class = "box8ai">
                            
                        </div>
                     </div>
                    <div class = "box8b innerbox2l">
                    </div>
                </div>
                <div class="box box-postion9">
                    <div class = "box9a innerbox1">
                        <div style = "float:left" class = "box9ai">
                            
                        </div>
                    </div>
                    <div class = "box9b innerbox2r">
                       
                    </div>
                </div>

                <div class="box box-postion10">
                    <div class = "box10a innerbox1">
                        <div style = "float:right" class = "box10ai">
                            
                        </div>
                    </div>
                    <div class = "box10b innerbox2l">
                        
                    </div>
                </div>
                <div class="box box-postion11">
                    <div class = "box11a innerbox1">
                        <div style = "float:left" class = "box11ai">
                            
                        </div>
                    </div>
                    <div class = "box11b innerbox2r">
                       
                    </div>
                </div>

                <div class="box box-postion12">
                    <div class = "box12a innerbox1">
                        <div style = "float:right" class = "box12ai">
                            
                        </div>
                    </div>
                    <div class = "box12b innerbox2l">
                       
                    </div>
                </div>
                <div class="box box-postion13">
                    <div class = "box13a innerbox1">
                        <div style = "float:left" class = "box13ai">
                            
                        </div>
                    </div>
                    <div class = "box13b innerbox2r">
                       
                    </div>
                </div>

                <div class="box box-postion14">
                    <div class = "box14a innerbox1">
                        <div style = "float:right" class = "box14ai">
                            
                        </div>
                    </div>
                    <div class = "box14b innerbox2l">
                       
                    </div>
                </div>

                <!-- outer Box -->
                <div id = 'box1'class="boxr">

                    <div class="muscles">
                        <h4 style="text-align: center;font-size: 10.2px;"><b style='padding-right: 2.729pt;'>Muscles</b>(Right Side)</h4>
                    </div>
                    <div class = "b1">
                        
                    </div>
                </div>
                
                <div id = 'box2'class="boxl">

                    <div class="musclesl">
                        <h4 style="text-align: center;font-size: 10.2px;padding-right:5px;">(Left Side)<b style = "padding-left: 2.047pt;">Muscles</b></h4>
                        <!-- <p style="text-align: end;">(Assited)</p> -->
                    </div>
                    <div class = "b2">
                        
                    </div>
                </div>
               
            </div>
            
        </div>

        <div class = "secondPage">
        </div>
     </div>
       <style>
/* Image positioning */
.fit {
  width: 120.96pt;
  height:287.28pt;
  position: absolute;
  /* align-items: center; */
  top:106.389pt;
  left: 239.151pt;
  z-index: -0;
  /* top:500px; */
}

.p2fit {
  width: 120.96pt;
  height:287.28pt;
  position: absolute;
  /* align-items: center; */
  /* bottom:100px; */
  left: 239.151pt;
  z-index: -0;
  top:106.389pt;
}

/* A4 Size page forming */
body {
    margin: 0;
    padding: 0;
    background-color: #FAFAFA;
    font: 12pt "Tahoma";
}
* {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
}
.page2 {
  /* min-height: 1468.8px;
  width: 1072.8;
    padding: 2cm;
    margin: 1cm auto;
    /* border: 1px #D3D3D3 solid; */
   /* border-radius: 5px;
    background: white;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1); */
    /* align-items: center;  */

    position: relative;
    top:30pt;

}
.subpage1 {
  align-items: center;
  position: relative;
    /* padding: 1cm; */
     /*border: 5px red solid; */
    height: 461.76pt;
    width: 609pt;
    /* top:30px; */
    /* right:30px; */
    /* outline: 2cm #FFEAEA solid; */
    /* margin-right: -100px; */
}

.subpage2 {
  align-items: center;
  position: relative;
  top: 1020px;
  /*top:800px;*/
  left:20px;
    /* padding: 1cm; */
     /*border: 5px red solid; */
    height: 827.10pt;
    width: 609pt;
    /* top:30px; */
    /* right:30px; */
    /* outline: 2cm #FFEAEA solid; */
    /* margin-right: -100px; */
}

/*@page {*/
/*    size: A4;*/
/*    margin: 0;*/
/*}*/
/*@media print {*/
/*    .page {*/
/*        margin: 0;*/
/*        border: initial;*/
/*        border-radius: initial;*/
/*        width: initial;*/
/*        min-height: initial;*/
/*        box-shadow: initial;*/
/*        background: initial;*/
/*        page-break-after: always;*/
/*    }*/
/*}*/

/* Dot forming */
/* .con {
  max-width: 600px;
  position: relative;
} */

.abc
  {
    background: #cc2016;
    border-radius: 100%;
    height: 9.464px;
    width: 9.464px;
    position: relative;
    left: 3.5px;
    top:3.32px;
    /* visibility: hidden; */
    /* left: 50%;
    top:50%; */
    /* bottom: 50%;
    right: 50%; */
    z-index: 1;
    
  }

.dot {
  background: #F7B9B5;
  border-radius: 100%;
  height: 16.464px;
  width: 16.464px;
  position: absolute;
  visibility: hidden;
}

.dot1 {
  top: 0px;
  left: 398px;
  z-index: 1;
  visibility: hidden;
  
}

.dot2 {
  top: 207px;
  left: 112px;
  z-index: 1;
}

.dot3 {
  top: 265px;
  left: 187px;
  z-index: 1;
}
.dot4 {
  top: 250px;
  left: 322px;
  z-index: 1;
}
.dot5 {
  top: 265px;
  left: 187px;
  z-index: 1;
  /* visibility: visible; */
}
.dot6 {
  top: 250px;
  left: 322px;
  z-index: 1;
  /* visibility: visible; */
}
.dot7 {
  top: 228px;
  left: 230px;
  z-index: 1;
}
.dot8 {
  top: 213px;
  left: 280px;
  z-index: 1;
}
.dot9 {
  top: 260px;
  left: 223px;
  z-index: 1;
}
.dot10 {
  top: 246px;
  left: 287px;
  z-index: 1;
}
.dot11 {
  top: 335px;
  left: 235px;
  z-index: 1;
}
.dot12 {
  top: 320px ;
  left: 275px;
  z-index: 1;
}
.dot13 {
  top: 410px;
  left: 239px;
  z-index: 1;
}
.dot14 {
  top: 395px;
  left: 269px;
  z-index: 1;
}


.p2d7, .p2d8, .p2d9, .p2d10, .p2d11, .p2d12, .p2d13, .p2d14
{
  position:absolute;
}


/* box implementation  */

.box {
  display:inline-block;
  flex-direction: column;
  justify-content:flex;
  /* border-style: solid;
  border-color: black; */
  visibility: hidden;
  background-color:transparent;
  z-index: 1;
  
}

.innerbox1
{
  display:inline-block;
  flex-direction: column;
  border-style: hidden;
  /* border-color: red;
  background-color: #FFEAEA; */
  font-size: 8.188pt;
  padding: 6.141pt 0px 0px 6.141pt;
  position: relative;
  right: 0px;
  /* border-radius: 2px;
  border-width: 1px; */
  border-width: 0.5px;
  border-radius: 2.52px;
}

.innerbox2l
{
  justify-content: flex;
  display:flex;
  flex-direction: row;
  font-size: 8.188pt;
  position: relative;
  right: 0px;
  /* border-style: solid;
  border-color: red; */
  /* margin: 10px 10px 10px 10px; */
  padding-top: 6.141px;
}

.innerbox2r {
  display: block;
  width: 136.47pt;
  font-size: 8.18pt;
  position: absolute;
  right: 19.647px;
  /* border-style: solid;
  border-color: red; */
  /* margin: 10px 10px 10px 10px; */
  padding-top: 6.141px;
  text-align: right; /* Add text-align property with right value */
}

.icon1rom
{
  /* max-width: 11.3472px; */
  /* max-height: 9.2117pt; */
  height: 7.854pt;
  width: 8.16pt;
  position: relative;
  /* top:5px; */
  right: -12.28x;
  margin-right: 0px;
}



.icon1
{
  /* max-width: 11.3472px; */
  max-height: 9.2117pt;
  position: relative;
  /* top:5px; */
  right: -12.28x;
  margin-right: 0px;
}

.icon1b
{
  max-width: 11.3472px;
  max-height: 10.9358px;
  position: relative;
  top:-1.8px;
  right: -18px;
  margin-right: 0px;
}

.icon2
{
  max-width: 54%;
  max-height: 12.28px;
}
.icon2e
{
  max-width: 54%;
  max-height: 12.28px;
  position: relative;
  top:5px;
}

.box-postion1
{

  position: absolute;
   right: 372.2pt;
  top: 717pt;
  z-index: 1;
  border-width: 0.5px;
  /* visibility: visible; */
}

.box-postion2
{
  /* display: inline-flex; */
  position: absolute;
  left: 362.317pt;
  top: 717pt;
  z-index: 1;
  border-width: 0.5px;
  /* visibility: visible; */
}

.box-postion3
{
  position: absolute;
  right: 372.2pt;
  top: 788pt;
  /* visibility: visible; */
}

.box-postion4
{position: absolute;
  left: 362.317pt;
  top: 788pt;
  /* visibility: visible; */
}

.box-postion5
{
  position: absolute;
  right: 372.2pt;
  top: 871pt;
  /* visibility: visible; */
}
.box-postion6
{
  position: absolute;
 left: 362.317pt;
  top: 932pt;
  /* visibility: visible; */
}

.box-postion7
{
  position: absolute;
   right: 372.2pt;
  top: 860pt;
  /* visibility: visible; */
}

.box-postion8
{
  position: absolute;
  left: 362.317pt;
  top: 860pt;
  /* visibility: visible; */
}

.box-postion9
{
  position: absolute;
  right: 372.2pt;
  top: 1009pt;
  /* visibility: visible; */
}

.box-postion10
{
  position: absolute;
 left: 362.317pt;
  top: 1009pt;
  /* visibility: visible; */
}


.box-postion11
{
  position: absolute;
  right: 372.2pt;
  top: 1081pt;
  /* visibility: visible; */
}

.box-postion12
{
  position: absolute;
  left: 362.317pt;
  top: 1081pt;
  /* visibility: visible; */
}
.box-postion13
{
  position: absolute;
  right: 372.2pt;
  top: 1150pt;
  /* visibility: visible; */
}

.box-postion14
{
  position: absolute;
  left: 362.317pt;
  top: 1150pt;
  /* visibility: visible; */
}

/* second page inner boxing*/

.p2box-position1
{
  position: absolute;
  right: 372.2pt;
  top: 200px;
  z-index: 1;
  /* visibility: visible; */
}

.p2box-position2
{
  /* display: inline-flex; */
  position: absolute;
  left: 362.317pt;
  top: 200px;
  z-index: 1;
  /* visibility: visible; */
}
.p2box-position3
{
  position: absolute;
  right: 372.2pt;
  bottom: 1000pt;
  /* visibility: visible; */
}

.p2box-position4
{
  position: absolute;
 left: 362.317pt;
  bottom: 1000pt;
  /* visibility: visible; */
}

.p2box-position5
{
  position: absolute;
  right: 372.2pt;
  bottom: 910pt;
  /* visibility: visible; */
}

.p2box-position6
{
  position: absolute;
   left: 362.317pt;
  bottom: 910pt;
  /* visibility: visible; */
}

.p2box-position7
{
  position: absolute;
  right: 372.2pt;
  top: 400px;
  /* visibility: visible; */
}
.p2box-position8
{
  position: absolute;
  left: 362.317pt;
  top: 400px;
  /* visibility: visible; */
}

.p2box-position9
{
  position: absolute;
  right: 372.2pt;
  bottom: 740pt;
  /* visibility: visible; */
}

.p2box-position10
{
  position: absolute;
  left: 362.317pt;
  bottom: 740pt;
  /* visibility: visible; */
}
.p2box-position11
{
  position: absolute;
  right: 372.2pt;
  bottom: 640pt;
  /* visibility: visible; */
}

.p2box-position12
{
  position: absolute;
  left: 362.317pt;
  bottom: 640pt;
  /* visibility: visible; */
}
.p2box-position13
{
  position: absolute;
  right: 372.2pt;
  bottom: 500pt;
  /* visibility: visible; */
}

.p2box-position14
{
  position: absolute;
   left: 362.317pt;
  bottom: 500pt;
  /* visibility: visible; */
}


/* Arrow part */

.line
{
  visibility: visible;
  position: absolute;
  visibility: hidden;
  border-bottom: solid;
  border-color: rgb(134, 130, 130);
  z-index: 1;
}

.line1a
{
  /* position: relative; */
  top: 875px;
  left: 415px;
  width: 50px;
  /* height: 100px; */
  /* visibility: visible; */
  /* transform: rotate(40deg); */
}

.line1b
{
  /* position: relative; */
  top: 958px;
  left: 394px;
  width: 170px;
  /* visibility: visible; */
  transform: rotate(80deg);
}

.line2a
{
  /* position: relative; */
  top: 163px;
  left: 30px;
  width: 120px;
  /* visibility: visible; */
}

.line2b
{
  /* position: relative; */
  top: 163px;
  left: 30px;
  width: 120px;
  /* visibility: visible; */
}

.line3a
{
  /* position: relative; */
  top: 284px;
  left: 143px;
  width: 57px;
  /* visibility: visible; */
}

.line3b
{
  /* position: absolute; */
  top: 284px;
  left: 143px;
  width: 57px;
  transform: rotate(40deg);
  /* visibility: visible; */
}


.line4a
{
  top: 263px;
  left: 68px;
  width: 83px;
  /* z-index: 1; */
  /* transform: rotate(-20deg); */
}

.line4b
{
  top: 263px;
  left: 68px;
  width: 83px;
  /* z-index: 1; */
  /* transform: rotate(-20deg); */
}

.line5a
{
  top: 184px;
  left: 143px;
  width: 57px;
  
}

.line5b
{
  top: 284px;
  left: 143px;
  width: 57px;
  /* visibility: hidden; */
}

.line6a
{
  top: 163px;
  left: 30px;
  width: 120px;
}

.line6b
{
  top: 163px;
  left: 30px;
  width: 120px;
}

.line7a
{
  top: 284px;
  left: 143px;
  width: 57px;
}

.line7b
{
  top: 284px;
  left: 143px;
  width: 57px;
}


.line8a
{
  top: 263px;
  left: 68px;
  width: 83px;
}

.line8b
{
  top: 263px;
  left: 68px;
  width: 83px;
}

.line9a
{
  top: 184px;
  left: 143px;
  width: 57px;
}

.line9b
{
  top: 184px;
  left: 143px;
  width: 57px;
}

.line10a
{
  top: 163px;
  left: 30px;
  width: 120px;
}

.line10b
{
  top: 163px;
  left: 30px;
  width: 120px;
}

.line11a
{
  top: 284px;
  left: 143px;
  width: 57px;
}

.line11b
{
  top: 284px;
  left: 143px;
  width: 57px;
}


.line12a
{
  top: 263px;
  left: 68px;
  width: 83px;
}

.line12b
{
  top: 263px;
  left: 68px;
  width: 83px;
}

.line13a
{
  top: 184px;
  left: 143px;
  width: 57px;
}

.line13b
{
  top: 184px;
  left: 143px;
  width: 57px;
}

.line14a
{
  top: 163px;
  left: 30px;
  width: 120px;
}

.line14b
{
  top: 163px;
  left: 30px;
  width: 120px;
}

/* Outer box */
.boxr {
  display: inline-block;
  background-color:  #F2F2F2;
  position: absolute;
  padding:4px;
  
 
  /* animation: increaseWidth 3s infinite linear; */
  /* padding: 4px; */
  /* margin-left: 14.4px; */
  left:8.188pt;
  border-radius: 9.18px;
  /* width: 169.5pt; */

  bottom: 12.75pt;
  width:115.26px;
  right:0px
  
}

.boxl {
  display: inline-block;
  background-color:  #F2F2F2;
  position: absolute;
  width:115.26px;
  right:0pt;
  border-radius: 9.18px;
  margin-right: 14.4px;
  animation: increaseWidth 3s infinite linear;
  /* width: 168pt; */
  /* padding: 4px; */

  bottom: 12.75pt;
}
.b1
{
  /* float:left; */
  position: relative;
  visibility: visible;
  border-radius: 20%;
  align-items: center;
  right: 10px;
}

.b2
{
  position: relative;
  visibility: visible;
  /* float:left; */
}
.b3
{
  position: relative;
  visibility: visible;
}

/* boxer */
.muscles
{
  
  margin-top: 4.094pt;
  /* margin-left: 4.188pt;
  margin-right: 4.188pt; */
  padding-top: 4.08px;
  padding-bottom: 10px;
  position: relative;
  color:#012E57;
}

.musclesl
{
  
  margin-top: 4.094pt;
  /* margin-left: 4.188pt;
  margin-right: 4.188pt; */
  margin-right: 0pt;
  padding-top: 4.08px;
  padding-bottom: 12px;
  position: relative;
  color:#012E57;
}
.assited
{
  position: absolute;
  /* top: 20px; */
  bottom: 2.5pt;
  left: 76.235px;
  font-size: 7.14px;
}

.assitedl
{
  position: absolute;
  /* top: 20px; */
  bottom: 2.7pt;
  left: 8.188px;
  font-size: 7.14px;
}
.p{
  position:relative;
}
.hip
{
  margin-left: 14.876pt;
  position: relative;
  padding-top: 3.417pt;
  bottom: 19.04px;
  color:#012E57;
}

.hipl
{
  position: absolute;
  right: 40.823pt;
  bottom: 5.04px;
  padding-top: 4.094pt;
  padding-bottom: 4.094pt;
  color:#012E57;
}
.info
{
  position: relative;
  margin:0px 2.9129px 2px 8.7388pt;
  border-radius: 4.08px;
  /* height: 50px; */
  width: 105px;
  height: 27.54px;
  bottom: 3.4177px;
  background: white;

  /* margin-bottom: 4.094pt; */
  /* padding-bottom: 6pt; */
  /* padding-left: 12pt; */
  margin-bottom: 2.094pt;
}

.infol
{
  position: relative;
  /* margin:0px 2.9129px 0px 2.9129px; */
  left:5px;
  border-radius: 4.08px;
  height: 27.54px;
  /* height: 50px; */
  width: 105px;
  bottom: 7.4177px;
  background: white;

  margin-bottom: 2.094pt;
  /* padding-right: 12pt; */

  /* padding-bottom: 6pt; */
}

.gluteus
{
  /* margin-left: 20px; */
  /* text-align: center; */
  /* margin-top: 5px; */
  /* margin-right: 5px; */
  padding-left: 6.12px;
  /* padding-bottom: 3.57px; */
  color: green;
  
}

.gluteusl
{
  position: absolute;
  /* margin-left: 20px; */
  /* text-align: center; */
  /* margin-top: 5px; */
  /* margin-right: 5px; */
  /* padding-right: 14.4px;
  padding-left: 10pt; */
  top:0pt;
  right:56.852pt;
  color: green;
  
}
.good
{
  position: relative;
  /* max-width: 20px;
  max-height: 20px; */
  /* align-items: center; */
  /* top: 5px;
  left: 10px;
  margin-left: 10px; */
  /* height: 9.2117pt;
  width: 9.2117pt; */
}

.goodl
{
  position: absolute;
  /* max-width: 20px;
  max-height: 20px; */
  /* align-items: center; */
  /* top: 5px;
  left: 10px;
  margin-left: 10px; */
  /* height: 9.2117pt;
  width: 9.2117pt; */

  right:43pt;
  top:6.4117pt;
}

.uv
{
  position: absolute;
  bottom:2.5pt;
  left: 21.07px;
  /* margin-top: 5px; */
  font-size: 7.14px;
}

.uvl
{
  position: absolute;
  bottom:2.7pt;
  right: 17.929pt;
  /* margin-top: 5px; */
  font-size: 7.14px;
}

/* second page */
/* Side Box */

.p2boxr
{
  display: inline-block;
  background-color:  #F2F2F2;
  position: absolute;
  
 
  /* animation: increaseWidth 3s infinite linear; */
  /* padding: 4px; */
  /* margin-left: 14.4px; */
  left:8.188pt;
  border-radius: 9.18px;
  top: 34.39px;
  width:115.26px;
}

.p2boxl
{
  display: inline-block;
  background-color:  #F2F2F2;
  position: absolute;
  
  right:0pt;
  border-radius: 9.18px;
  margin-right: 14.4px;
  animation: increaseWidth 3s infinite linear;
  /* width: 168pt; */
  padding: 4px;

  top: 34.39px;
  width:115.26px;
}

/* dir */

.left
{
  float: left;
}

.right
{
  float: right;
}

/* top */
.topleft
{
  position: absolute;
  font-size: 7.1647pt;
  top:49.129pt;
  left: 8.188px;
  border: solid #B5B5B5;
  border-width: 0.5px;
  border-radius: 2.04px;
  Width:234.401pt;
  Height:25.5882pt;
  /* background-color: #E8E8E8; */
}

.topright
{
  position: absolute;
  font-size: 7.1647pt;
  right: 8.188px;
  top:49.129pt;
  border: solid #B5B5B5;
  Width:234.401pt;
  Height:25.5882pt;
  /*background-color:transparent;*/
  border-width: 0.5px;
  border-radius: 2.04px;
}

.icontopemg
{
  max-width: 11.136t;
}
.icontoppoor
{
  max-width: 9.0582pt;
}
.icontoprom
{
  max-width: 9.058pt;
}
    </style>



   
  
  


        
  
      <!-- Footer of Page1-->
      <!-- <div style="display:none;width: 100%;height: 29pt;background-color:#062444 !important;position: relative;top: 526pt; display: flex;align-items: center;justify-content: space-between; padding: 5pt;">
        <p style="color:#FFFFFF !important;font-size:11pt; font-family: 'Avenir';position: relative;">Report downloaded on <%= new Date(today).toDateString().split(' ').slice(1).join(' ')%> </p>
        <p style="color:#FFFFFF !important;font-size:11pt; font-family: 'Avenir';position: relative;left: -65pt;"><%if(details[0].phiziopatients[0].patientgender.toLowerCase() == 'male' || details[0].phiziopatients[0].patientgender.toLowerCase() == 'm'){%>Mr. <%}else {%> Ms. <%}%> <%= details[0].phiziopatients[0].patientname.substr(0,1).toUpperCase()%><%= details[0].phiziopatients[0].patientname.substr(1,details[0].phiziopatients[0].patientname.length)%> </p>
        <p style="color:#FFFFFF !important;font-size:11pt; font-family: 'Avenir';position: relative;"> Page 1/<%if(report[0].sessiondetails.length < 13) { %> <%=report[0].sessiondetails.length+2%> <% } %> <%if(report[0].sessiondetails.length >= 13) { %> <%=report[0].sessiondetails.length+3%> <% } %>  </p>
      </div> -->

      <!-- <div style="width: 100%;height: 29pt;background-color:#062444 !important;position: relative;top: 650pt;"></div>
      <p style="color:#FFFFFF !important;text-align: right;font-size:11pt; font-family: 'Avenir';top:625pt;right:5pt;position: relative;"> Page 1/<%if(report[0].sessiondetails.length < 13) { %> <%=report[0].sessiondetails.length+2%> <% } %> <%if(report[0].sessiondetails.length >= 13) { %> <%=report[0].sessiondetails.length+3%> <% } %>  </p>
      <p style="color:#FFFFFF !important;text-align: center;font-size:11pt; font-family: 'Avenir';top:610pt;position: relative;"><%if(details[0].phiziopatients[0].patientgender.toLowerCase() == 'male' || details[0].phiziopatients[0].patientgender.toLowerCase() == 'm'){%>Mr. <%}else {%> Ms. <%}%> <%= details[0].phiziopatients[0].patientname.substr(0,1).toUpperCase()%><%= details[0].phiziopatients[0].patientname.substr(1,details[0].phiziopatients[0].patientname.length)%> </p>
      <p style="color:#FFFFFF !important;text-align: left;font-size:11pt; font-family: 'Avenir';top:595pt;position: relative;left: 5pt;">Report downloaded on <%= new Date(today).toDateString().split(' ').slice(1).join(' ')%> </p> -->
      
    </div>

   


    <!-- PAGE 2 -->
    

    

      
     
   
<!--PAGE 3-->
<div class="page">

  <div class="header" style="width: 100%;background-color: #062444 !important;"></div>
    

    <div id="add-cont"
    style="display: flex; flex-direction: row; align-items: center; justify-content: space-between ;padding: 0px;  width: inherit; height: 19px; left: 0px; margin-top: 22px;">

    <div class="add-col" style="width: 312px; height: 0px; border: 3px solid #CDCDCD;"></div>
    <div id="add-name"
        style=" font-family: 'Roboto'; font-style: normal; font-weight: 700; font-size: 14pt; line-height: 19px; color: #707070;">
        Additional Comment</div>
    <div class="add-col" style="width: 312px; height: 0px; border: 3px solid #CDCDCD;"></div>

</div>
    
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:60px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    <hr style="width:95%;text-align:center;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;background-color:#E3E3E3 !important;margin-top:15px;">
    
    
    
    
    <p style="float:left;margin-left:2.5%;margin-top:30px;font-size:13px;font-weight:5px;color: #012E57 !important;font-size:14pt; font-family: 'Roboto';">Next Session:</p>
    <hr style="float:left;width:40%;margin-top:60px;text-align:left;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;color:#012E57 !important;background-color:#012E57 !important;">
    
    <p style="float:left;margin-top:30px;margin-left:40px;font-size:13px;font-weight:5px;color: #012E57 !important;font-size:14pt; font-family: 'Roboto';">Time:</p>
    <hr style="float:left;width:30%;margin-top:60px;text-align:left;margin-left:auto;margin-right:auto;height:0.5px;border-width:0;color:#012E57 !important;background-color:#012E57 !important;">
    
    <p style="clear:both;float:left;margin-left:2.5%;margin-top:30px;font-size:13px;font-weight:5px;color: #012E57 !important;font-size:14pt; font-family: 'Roboto';">Report handed over by:</p>
    <hr style="float:left;width:40%;margin-top:60px;text-align:left;margin-left:auto;margin-right:auto;height:1px;border-width:0;color:#012E57 !important;background-color:#012E57 !important;">
    
    <p style="float:left;margin-top:30px;margin-left:40px;font-size:13px;font-weight:5px;color: #012E57 !important;font-size:14pt; font-family: 'Roboto';">Dept:</p>
    <hr style="float:left;width:20%;margin-top:60px;text-align:left;margin-left:auto;margin-right:auto;height:1px;border-width:0;color:#012E57 !important;background-color:#012E57 !important;">
    
    <p style="clear:both;float:left;margin-left:2.5%;margin-top:100px;margin-bottom:30px;font-size:13px;font-weight:5px;color: #012E57 !important;font-size:14pt; font-family: 'Roboto';">Seal & Signature</p>
    <p style="float:left;margin-left:31%;margin-top:100px;margin-bottom:30px;font-size:13px;width: auto;font-weight:5px;color: #012E57 !important;font-size:14pt; font-family: 'Roboto';">Caregiver's Contact No.</p>
    <hr style="float:left;margin-left:0%;width:20%;margin-top:130px;height:1px;border-width:0;color:#012E57 !important;background-color:#012E57!important;">
    
  

  <div class="terms_and_conditions" style="clear:both;position:relative; top:30px;width:100%;height: auto;">
    <div id="term-cont" style="display: flex; flex-direction: row; align-items: center; justify-content: space-between ;padding: 0px;  width: inherit; height: 19px; left: 0px;">
      <div class="term-col" style=" width: 312px; height: 0px; border: 3px solid #006CB5;"></div>
      <div id="term-name" style="font-family: 'Roboto'; font-style: normal; font-weight: 700; font-size: 14pt; line-height: 19px; color: #006CB5;">Terms & Conditions</div>
      <div class="term-col" style=" width: 312px; height: 0px; border: 3px solid #006CB5;"></div>
  </div>
  
  <ul style="position:relative;top:20px;left:20pt;margin-left:10pt; margin-right:10pt;list-style-type: disc;">
  
  <li style="font-size:13px;font-weight:5px;margin-top:20px;margin-right:20pt;font-family: 'Helvetica';color: #707070;">The reported results are for more information and interpretation of the referring doctor/physiotherapist or such medical professional who understands reporting units, reference ranges, and limitations of technologies. The analysis in the report is based on tentative normative data.</li>
  
  <li style="font-size:13px;font-weight:5px;margin-top:20px;margin-right:20pt;font-family: 'Helvetica';color: #707070;">It is presumed that the assessment tests are performed on the patient named or identified and the verification of the particulars have been cleared out by patient or his/her representative at the point of generation of this report. The reported results are restricted to the given patient only.</li>
  
  <li style="font-size:13px;font-weight:5px;margin-top:20px;margin-right:20pt;font-family: 'Helvetica';color: #707070;">Should the results indicate an unexpected abnormality, the same should be reconfirmed.</li>
    
  <li style="font-size:13px;font-weight:5px;margin-top:20px;margin-right:20pt;font-family: 'Helvetica';color: #707070;">Results may vary from one center to another and from time to time for the same parameter for the same patient. Assessments are performed in accordance with standard set procedures. Neither the physiotherapy center (including its employees, representatives) using Pheezee nor the manufacturer of Pheezee (Startoon Labs and its employees, representatives) assume any liability, responsibility for any loss or damage that maybe incurred by any person as a result of presuming the meaning or contents of this report.</li>
  
  <li style="font-size:13px;font-weight:5px;margin-top:20px;margin-right:20pt;font-family: 'Helvetica';color: #707070;">This report is not valid for medico-legal purposes.</li>
  
</ul>  

<p style="position:relative;font-size:13px;font-weight:5px;top:44px;left:20px;color: #707070;font-family: 'Helvetica';"><b>Suggestions</b></p>

    <ul style="position:relative;top:34px;margin-left:10pt; margin-right:10pt;list-style-type: disc;left:20pt;">
    <li style="font-size:13px;font-weight:5px;margin-top:20px;font-family: 'Helvetica';color: #707070;">Values out of reference range requires reconfirmation before starting any medical treatment.</li>
  <li style="font-size:13px;font-weight:5px;margin-top:20px;font-family: 'Helvetica';color: #707070;">Retesting/reassessment is needed if you suspect any quality shortcomings.</li>
  </ul>
  </div>

  <!-- Footer of last page-->
       
<!-- Footer of last page-->
      
</div>


<!-- Shailab's Script -->

<script>

  // Get the HTML element with the class name "img_name"
  var imageElement = document.querySelector('.fit');
  // for dot
  const dot = ['1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1'];
  const d = ['1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1'];
  dot[1] = document.querySelector('.dot1');
  dot[2] = document.querySelector('.dot2');
  dot[3] = document.querySelector('.dot3');
  dot[4] = document.querySelector('.dot4');
  dot[5] = document.querySelector('.dot5');
  dot[6] = document.querySelector('.dot6');
  dot[7] = document.querySelector('.dot7');
  dot[8] = document.querySelector('.dot8');
  dot[9] = document.querySelector('.dot9');
  dot[10] = document.querySelector('.dot10');
  dot[11] = document.querySelector('.dot11');
  dot[12] = document.querySelector('.dot12');
  dot[13] = document.querySelector('.dot13');
  dot[14] = document.querySelector('.dot14');
  
  d[1] = document.querySelector('.d1');
  d[2] = document.querySelector('.d2');
  d[3] = document.querySelector('.d3');
  d[4] = document.querySelector('.d4');
  d[5] = document.querySelector('.d5');
  d[6] = document.querySelector('.d6');
  d[7] = document.querySelector('.d7');
  d[8] = document.querySelector('.d8');
  d[9] = document.querySelector('.d9');
  d[10] = document.querySelector('.d10');
  d[11] = document.querySelector('.d11');
  d[12] = document.querySelector('.d12');
  d[13] = document.querySelector('.d13');
  d[14] = document.querySelector('.d14');
  // for box
  const box = ['1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1', '1', '1', '1','1', '1', '1'];
  box[1] = document.querySelector('.box-postion1');
  box[2] = document.querySelector('.box-postion2');
  box[3] = document.querySelector('.box-postion3');
  box[4] = document.querySelector('.box-postion4');
  box[5] = document.querySelector('.box-postion5');
  box[6] = document.querySelector('.box-postion6');
  box[7] = document.querySelector('.box-postion7');
  box[8] = document.querySelector('.box-postion8');
  box[9] = document.querySelector('.box-postion9');
  box[10] = document.querySelector('.box-postion10');
  box[11] = document.querySelector('.box-postion11');
  box[12] = document.querySelector('.box-postion12');
  box[13] = document.querySelector('.box-postion13');
  box[14] = document.querySelector('.box-postion14');
  box[15] = document.querySelector('.box-postion15');
  box[16] = document.querySelector('.box-postion16');
  box[17] = document.querySelector('.box-postion17');
  box[18] = document.querySelector('.box-postion18');
  box[19] = document.querySelector('.box-postion19');
  box[20] = document.querySelector('.box-postion20');
  
  // for the lines
  const line = ['1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1', '1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1','1', '1', '1', '1', '1', '1','1', '1', '1', '1', '1'] ;
  line[1] = document.querySelector('.line1a');
  line[21] = document.querySelector('.line1b');
  line[2] = document.querySelector('.line2a');
  line[22] = document.querySelector('.line2b');
  line[3] = document.querySelector('.line3a');
  line[23] = document.querySelector('.line3b');
  line[4] = document.querySelector('.line4a');
  line[24] = document.querySelector('.line4b');
  line[5] = document.querySelector('.line5a');
  line[25] = document.querySelector('.line5b');
  line[6] = document.querySelector('.line6a');
  line[26] = document.querySelector('.line6b');
  line[7] = document.querySelector('.line7a');
  line[27] = document.querySelector('.line7b');
  line[8] = document.querySelector('.line8a');
  line[28] = document.querySelector('.line8b');
  line[9] = document.querySelector('.line9a');
  line[29] = document.querySelector('.line9b');
  line[10] = document.querySelector('.line10a');
  line[30] = document.querySelector('.line10b');
  line[11] = document.querySelector('.line11a');
  line[31] = document.querySelector('.line11b');
  line[12] = document.querySelector('.line12a');
  line[32] = document.querySelector('.line12b');
  line[13] = document.querySelector('.line13a');
  line[33] = document.querySelector('.line13b');
  line[14] = document.querySelector('.line14a');
  line[34] = document.querySelector('.line14b');
  line[15] = document.querySelector('.line15a');
  line[35] = document.querySelector('.line15b');
  line[16] = document.querySelector('.line16a');
  line[36] = document.querySelector('.line16b');
  line[17] = document.querySelector('.line17a');
  line[37] = document.querySelector('.line17b');
  line[18] = document.querySelector('.line18a');
  line[38] = document.querySelector('.line18b');
  line[19] = document.querySelector('.line19a');
  line[39] = document.querySelector('.line19b');
  line[20] = document.querySelector('.line20a');
  line[40] = document.querySelector('.line20b');
  
  const patient_data = new Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
  const box_to_dot_map = new Array(1, 2, 3, 4, 3, 4, 5, 6, 7, 8, 7, 8, 7, 8, 9, 10, 11, 12, 13, 14);
  
  function dot_implement(injured)
  {
      if(injured == 'Empty' || injured == '')
      {
          for(let i =1; i<=14;i++)
          {
              dot[i].style.background ='#DBF5D6';
              d[i].style.background ='#92E184'
              // var d1 = document.querySelector('.p2d'+i);
              // d1.style.background ='#DBF5D6';
              // var d2 = document.querySelector('.d'+i);
              // d2.style.background ='#92E184';
          }
      }
      else if(injured == 'Bi-Lateral')
      {
          for(let i =1; i<=14;i++)
          {
              // var d1 = document.querySelector('.p2d'+i);
              // d1.style.background ='#F7B9B5';
              dot[i].style.background ='#F7B9B5';
              d[i].style.background ='#CC2016';
          }
      }
      else if(injured == 'Right')
      {
          for(let i =1; i<=14;i+=2)
          {
              dot[i].style.background ='#F7B9B5';
              d[i].style.background ='#CC2016';
              dot[i+1].style.background ='#DBF5D6';
              d[i+1].style.background ='#92E184';
  
              // var d1 = document.querySelector('.p2d'+i);
              // d1.style.background ='#F7B9B5';
          }
      }
      else if(injured = 'Left'){
          for(let i =1; i<=14;i+=2)
          {
              dot[i+1].style.background ='#F7B9B5';
              d[i+1].style.background ='#CC2016';
              dot[i].style.background ='#DBF5D6';
              d[i].style.background ='#92E184';
          }
      }
  }

  function dot_implement2(injured)
  {
      if(injured == 'Empty')
      {
          for(let i =1; i<=14;i++)
          {
              dot[i].style.background ='#DBF5D6';
              d[i].style.background ='#92E184'
              // var d1 = document.querySelector('.p2d'+i);
              // d1.style.background ='#DBF5D6';
              // var d2 = document.querySelector('.d'+i);
              // d2.style.background ='#92E184';
          }
      }
      else if(injured == 'Bi-Lateral')
      {
          for(let i =1; i<=14;i++)
          {
              // var d1 = document.querySelector('.p2d'+i);
              // d1.style.background ='#F7B9B5';
              dot[i].style.background ='#F7B9B5';
              d[i].style.background ='#CC2016';
          }
      }
      else if(injured == 'Right')
      {
          for(let i =1; i<=14;i+=2)
          {
              dot[i].style.background ='#F7B9B5';
              d[i].style.background ='#CC2016';
              dot[i+1].style.background ='#DBF5D6';
              d[i+1].style.background ='#92E184';
  
              // var d1 = document.querySelector('.p2d'+i);
              // d1.style.background ='#F7B9B5';
          }
      }
      else if(injured = 'Left'){
          for(let i =1; i<=14;i+=2)
          {
              dot[i+1].style.background ='#F7B9B5';
              d[i+1].style.background ='#CC2016';
              dot[i].style.background ='#DBF5D6';
              d[i].style.background ='#92E184';
          }
      }
  }
  var secondPageImage;
  var ws2;
  var hs2;
  function changeImage(gender, patient_data, injured)
  {
      dot_implement(injured);

      var sh = document.querySelector('.fit');
     
      for(var i =0; i<20;i++)
      {
          if(patient_data[i]!=-1)
          {
              // dot[box_to_dot_map[i]].style.visibility = 'visible';
              // box[i+1].style.visibility ='visible';
          }
      }
      if(gender == 'female')
      {
        sh.style.width = '97.7364pt';
        sh.style.height = '283.56pt';
        ws2 = '97.7364pt';
        hs2 = '283.56pt';
  
          if(injured == 'Bi-Lateral')
          {
              imageElement.src = '/icons/images/Female Bilateral body part.png';
              secondPageImage = '/icons/images/Female Bilateral body part.png';
          }
          else if(injured == 'Left')
          {
              imageElement.src = '/icons/images/Female Left Side affected body part.png';
              secondPageImage ='/icons/images/Female Left Side affected body part.png';
          }
          else if(injured == 'Right')
          {
              imageElement.src = '/icons/images/Female Right Side affected body part.png';
              secondPageImage ='/icons/images/Female Right Side affected body part.png';
          }
          else
          {
              imageElement.src = '/icons/images/Female Empty body part.png';
              secondPageImage ='/icons/images/Female Empty body part.png';
          }
        //  arr5 
        dot[1].style.top= '158.941pt';
          dot[1].style.left= '267.8235pt';
          dot[2].style.top= '158.941pt';
          dot[2].style.left= '295.70pt';
          dot[3].style.top= '204.70588pt';
          dot[3].style.left= '254.588pt';
          dot[4].style.top= '204.70588pt';
          dot[4].style.left= '309.2588pt';
          dot[5].style.top= '230.823pt';
          dot[5].style.left= '248.0588pt';
          dot[6].style.top= '230.823pt';
          dot[6].style.left= '317.0645pt';
          dot[7].style.top= '210.3529pt';
          dot[7].style.left= '274.47pt';
          dot[8].style.top= '210.3529pt';
          dot[8].style.left= '290.694pt';
          dot[9].style.top= '239.47pt';
          dot[9].style.left= '268.0588pt';
          dot[10].style.top= '239.47pt';
          dot[10].style.left= '296.10pt';
          dot[11].style.top= '310.47pt';
          dot[11].style.left= '272.3pt';
          dot[12].style.top= '310.47pt';
          dot[12].style.left= '291.329pt';
          dot[13].style.top= '363.88pt';
          dot[13].style.left= '275.88235pt';
          dot[14].style.top= '363.88pt';
          dot[14].style.left= '290.28pt';
          // imageElement.style.bottom = '210px'
          // box[1].style.right = '260px';
          // box[1].style.bottom = '540px';
          // line[1].style.visibility = 'visible';
          // line[21].style.visibility='visible';
          // line[1].style.top = '100px';
          // line[1].style.left = '100px';
          // line[21].style.top = '-125px';
          // line[21].style.left = '104px';
          // line[21].style.width = '170px';
          // line[21].style.transform = 'rotate(67deg)';
  
          // line[2].style.visibility = 'visible';
          // line[22].style.visibility='visible';
          // line[2].style.top = '100px';
          // line[2].style.left = '380px';
          // line[2].style.width = '70px';
          // line[22].style.top = '-134px';
          // line[22].style.left = '256px';
          // line[22].style.width = '180px';
          // line[22].style.transform = 'rotate(-67deg)';
  
          // line[3].style.visibility = 'visible';
          // line[23].style.visibility='visible';
          // line[3].style.top = '-70px';
          // line[3].style.left = '95px';
          // line[3].style.width = '30px';
          // line[23].style.top = '-9px';
          // line[23].style.left = '84px';
          // line[23].style.width = '140px';
          // line[23].style.transform = 'rotate(65deg)';
          
          // line[4].style.visibility = 'visible';
          // line[24].style.visibility='visible';
          // line[4].style.top = '-80px';
          // line[4].style.left = '380px';
          // line[4].style.width = '70px';
          // line[24].style.top = '-22px';
          // line[24].style.left = '292px';
          // line[24].style.width = '130px';
          // line[24].style.transform = 'rotate(-70deg)';
  
          // line[5].style.visibility = 'visible';
          // line[25].style.visibility='visible';
          // line[5].style.top = '-10px';
          // line[5].style.left = '100px';
          // line[5].style.width = '50px';
          // line[25].style.top = '18px';
          // line[25].style.left = '132px';
          // line[25].style.width = '70px';
          // line[25].style.transform = 'rotate(60deg)';
  
          // line[6].style.visibility = 'visible';
          // line[26].style.visibility='visible';
          // line[6].style.top = '-16px';
          // line[6].style.left = '380px';
          // line[6].style.width = '70px';
          // line[26].style.top = '8px';
          // line[26].style.left = '323px';
          // line[26].style.width = '70px';
          // line[26].style.transform = 'rotate(-50deg)';
  
          // line[7].style.visibility = 'visible';
          // line[27].style.visibility='visible';
          // line[7].style.top = '50px';
          // line[7].style.left = '100px';
          // line[7].style.width = '60px';
          // line[27].style.top = '70px';
          // line[27].style.left = '142px';
          // line[27].style.width = '50px';
          // line[27].style.transform = 'rotate(70deg)';
  
          // line[8].style.visibility = 'visible';
          // line[28].style.visibility='visible';
          // line[8].style.top = '45px';
          // line[8].style.left = '375px';
          // line[8].style.width = '80px';
          // line[28].style.top = '64px';
          // line[28].style.left = '336px';
          // line[28].style.width = '50px';
          // line[28].style.transform = 'rotate(-55deg)';
  
          // line[9].style.visibility = 'visible';
          // line[29].style.visibility='visible';
          // line[9].style.top = '135px';
          // line[9].style.left = '100px';
          // line[9].style.width = '105px';
          // line[29].style.top = '105px';
          // line[29].style.left = '188px';
          // line[29].style.width = '61px';
          // line[29].style.transform = 'rotate(-65deg)';
  
          // line[10].style.visibility = 'visible';
          // line[30].style.visibility='visible';
          // line[10].style.top = '130px';
          // line[10].style.left = '315px';
          // line[10].style.width = '140px';
          // line[30].style.top = '100px';
          // line[30].style.left = '272px';
          // line[30].style.width = '61px';
          // line[30].style.transform = 'rotate(65deg)';
  
          // line[11].style.visibility = 'visible';
          // line[31].style.visibility='visible';
          // line[11].style.top = '-135px';
          // line[11].style.left = '100px';
          // line[11].style.width = '105px';
          // line[31].style.top = '105px';
          // line[31].style.left = '188px';
          // line[31].style.width = '61px';
          // line[31].style.transform = 'rotate(-65deg)';
  
  
      }
      else 
      {

          sh.style.width = '120.5436pt';
          sh.style.height = '286.2936pt';

          ws2 = '120.5436pt';
        hs2 = '286.2936pt';
          if(injured == 'Bi-Lateral')
          {
              imageElement.src = '/icons/images/Male Bilateral body part.png';
              secondPageImage ='/icons/images/Male Bilateral body part.png';
          }
          else if(injured == 'Left')
          {
              imageElement.src = '/icons/images/Male Left Side affected.png';
              secondPageImage ='/icons/images/Male Left Side affected.png';
          }
          else if(injured == 'Right')
          {
              imageElement.src = '/icons/images/Male Right Side affected.png';
              secondPageImage =   '/icons/images/Male Right Side affected.png';
          }
          else
          {
              imageElement.src = '/icons/images/Male Empty Body part.png';
              secondPageImage ='/icons/images/Male Empty Body part.png';
          }

          // arr5 
          dot[1].style.top= '156.941pt';
          dot[1].style.left= '269.8235pt';
          dot[2].style.top= '156.941pt';
          dot[2].style.left= '318.70pt';
          dot[3].style.top= '206.70588pt';
          dot[3].style.left= '256.588pt';
          dot[4].style.top= '206.70588pt';
          dot[4].style.left= '329.2588pt';
          dot[5].style.top= '238.823pt';
          dot[5].style.left= '250.0588pt';
          dot[6].style.top= '238.823pt';
          dot[6].style.left= '337.7645pt';
          dot[7].style.top= '218.3529pt';
          dot[7].style.left= '283.47pt';
          dot[8].style.top= '218.3529pt';
          dot[8].style.left= '302.694pt';
          dot[9].style.top= '252.47pt';
          dot[9].style.left= '278.0588pt';
          dot[10].style.top= '252.47pt';
          dot[10].style.left= '309.10pt';
          dot[11].style.top= '310.47pt';
          dot[11].style.left= '281.811pt';
          dot[12].style.top= '310.47pt';
          dot[12].style.left= '304.329pt';
          dot[13].style.top= '365.88pt';
          dot[13].style.left= '282.88235pt';
          dot[14].style.top= '365.88pt';
          dot[14].style.left= '300.28pt';
      }
  }
  
  // inner box function1
  var map1 = {};
  var map2 = {};
  var map3 = {};
  for(var i = 1;i<=14;i++)
  {
      var ID = ".box"+i+"a";
      map1[ID]=0;
      map2[ID]=0;
      map3[ID]=0; 
      ID = ".p2box" + i +"a";
      map1[ID]=0;
      map2[ID]=0;
      map3[ID]=0; 
  }
  
  function addtext(ID, data, testing, dir, data1) {
      
      if(testing != 'Isometric')
      {
        map1[ID]++;
        // Create element
        const el = document.createElement('text');
      
        // Add classes to element
        el.classList.add(dir);
      
        var colr = '#44C02F';
        if(data1 <= 33)
        {
            colr = '#CC2016'
        }
        else if(data1 <= 66)
        {
            colr = '#E6A000'
        }
        var Id1 = ID+'i';
        const box2 = document.querySelector(Id1); // Use querySelector instead of getElementByClass
    
        if(map1[ID]>1)
        {
            var el1 = document.createElement('br');
            box2.appendChild(el1);
        }
        el.innerHTML ="<text style = 'padding-bottom:6.141pt;color:" +colr+";font-size:8.16px;'><b style = 'font-size:8.16px;'>" +data +"째</b>" +" "+ testing+ "</text>";
        
        s = '6,82px';
        el.style.padding = '0px 6.823px 6.141pt 0px';
        box2.appendChild(el);

    
        // box.style.border = "solid blue";
        const box1 = document.querySelector(ID);
        box1.style.visibility = 'visible';
        box1.style.border = "solid";
      }
    }
    
  
    
  // function to add image
  
  
  // inner box function2
  function addImage (ID, path, dir)
  {
      const el = document.createElement('img');
      
      el.src = path;
      el.classList.add('icon1rom');
      const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
      // el.style.padding = '0px 10px 0px 10px';
      if(dir == 'right')el.style.margin = '0px 7px 0px 0px';
      else el.style.margin = '0px 6px 0px -1px';
      var colr1= '#DBF5D6';
      var colr2= '1.5px solid #92E184';

  
      if(path == '/icons/icons/ROM Red.png')
      {
          colr1 = '#FDE9E8'
          colr2 = '1.5px solid #F7B9B5'
      }
      else if(path == '/icons/icons/ROM Yellow.png')
      {
        colr1 = '#FFEFCC'
        colr2 = '1.5px solid #FFCF66'
      }

      box.style.backgroundColor = colr1;
      box.style.border = colr2;
      // el.style.height = '13.2pt'
      // el.style.width = '10.78pt'
      
      box.appendChild(el);
      
      if(map1[ID] == 1)
      {
          el.style.top = '0px';
      }
      if(map1[ID] == 2)
      {
          el.style.top= '8.8235px';
      }
      else if(map1[ID] == 3)
      {
          el.style.top= '16.694px';
      }
      else if(map1[ID] == 4)
      {
          el.style.bottom= '-26.88235px';
      }
  
  
  }
  
  
  //   addtext('.box1a', )
    
  
  // inner box 2 implementation
  
  // // inner box function3
  function addlower(ID, dir,  firstImg, firsttext, secondImg, secondtext)
  {
      const box1 = document.querySelector(ID); // Use querySelector instead of getElementByClass
      box1.style.visibility='visible';

      if(dir == 'right')
      {
        const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
        // const box = document.createElement('div');
          if(firstImg != '-1')
          {
              const el = document.createElement('img');
              el.src = firstImg;
              el.classList.add('icon2');
              
              box.appendChild(el);
              
          }
  
          if(firsttext != '-1')
          {
              const el = document.createElement('text');
              el.innerHTML = firsttext;
              // el.classList.add('icon2');
              el.style.padding = '0px 6.823px 0px 6.823px';
              box.appendChild(el);
              // if(firstImg == '-1')box.style.left = '-12px';
              // else box.style.left = '-20px'
              
          }
  
          if(secondImg != '-1')
          {
              const el = document.createElement('img');
              el.src = secondImg;
              el.classList.add('icon2');
              box.appendChild(el);
          }
  
          if(secondtext != '-1')
          {
              const el = document.createElement('text');
              el.innerHTML = secondtext;
              // el.classList.add('icon2');
              el.style.padding = '0px 0px 0px 6.823px';
              box.appendChild(el);
          }
      }
      else
      {
          if(secondtext != '-1')
          {
              const el = document.createElement('text');
              el.innerHTML = secondtext;
              // el.classList.add('icon2');
              const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
              el.style.padding = '0px 6.823px 0px 0px';
              box.appendChild(el);
          }
  
          if(secondImg != '-1')
          {
              const el = document.createElement('img');
              el.src = secondImg;
              el.classList.add('icon2');
              const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
              box.appendChild(el);
          }
  
          if(firsttext != '-1')
          {
              const el = document.createElement('text');
              el.innerHTML = firsttext;
              // el.classList.add('icon2');
              const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
              el.style.padding = '0px 6.823px 0px 6.823px';
              box.appendChild(el);
          }
  
          if(firstImg != '-1')
          {
              const el = document.createElement('img');
              el.src = firstImg;
              el.classList.add('icon2');
              const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
              box.appendChild(el);
              // box.style.left = '-20px'
          }
      }

      
  }
  // var ID = '.box1b';
  // var dir = 'right';
  // var firstImg ="icons/Poor Endurance Icon Red.png";
  // firstImg='-1'
  // firstImg = '-1';
  // var secondImg = "icons/EMG ICon.png";
  // var firsttext = "Excellent";
  // var secondtext = "Shoulder <br>& Neck" ;
  
  // var ID1 = '.box2b' 
  // var dir1 = 'l'
  // firstImg ='-1'
  
  // addtext('.box2a', "0째-18째", "Flexion");
  // addtext('.box2a', "0째-18째", "Extension");
  // addtext('.box2a', "0째-18째", "Abduction");
  // //   addtext('.box2a', "0째-18째", "Adduction");
  // addImage('.box2a', "icons/ROM Red.png");
  
  
  // Outer Box:-
  function addOuterLine_Head(ID, data, dir)
  {
      const el = document.createElement('div');
      const el1 = document.createElement('div');
      el.innerHTML ="<br>" + "<b style = 'font-size: 7.14px;'>" +data +"</b>";
      if(dir == 'Left')el.classList.add('hipl');
      else el.classList.add('hip');
      el1.appendChild(el);
      el1.classList.add('p');
      el1.style.height = '14.294pt';
      el1.style.width = '115.65pt';
      const box = document.querySelector(ID); // Use querySelector instead of getElementByClass
      box.appendChild(el1);
  }
  
  // addOuterLine_Head('.b1', 'Shoulder');
  
  // s1 = "shailab";
  // var shift = ['0px','10px', '20px', '30px', '40px', '50px', '60px', '70px', '80px', '90px', '100px']
  var count =1;

  function assit(data)
  {
    if(data == '')return '';
    else return  data;
  }

  // function sidebox(dir, page, id)
  // {
  //   if(id == '.p2b1' || id == '.p2b2')
  //   {
  //     return id;
  //   }
  //   if(dir == 'Right')
  //   {
  //       if(page == 1)return '.b2';
  //       else return '.p2b2';
  //   }
  //   else
  //   {
  //     if(page == 1)return '.b';
  //       else return '.p2boxl';
  //   }
  // }
  function addOuterLine(ID, icon, Information, UV, assisted,emg_d, present, dir)
  {
      
      count++;
      var colr = '#44C02F' 
      if(present == 'A')
      {
        colr = '#505050';
        UV = '?';
        assisted = "";
        icon = '/icons/icons/blank.jfif';
      }
      if(icon == '/icons/icons/blank.jfif')
      {
        colr = '#505050';
      }
      else if(icon == '/icons/icons/Fair.png')
      {
          colr = '#E6A000'
      }
      else if(icon == '/icons/icons/Needs Attention.png')
      {
          colr = '#CC2016'
      }
      var s1 = "";
      if(dir == 'Left')
      {
        s1 = "<div style = 'position:relative; height:27.635pt; width:116.68pt;><div style='height:27.635pt; width:116.68pt; margin-left:4.9129pt>"+
        "<p class = 'gluteusl' style = 'color :"+ colr +";font-size: 8.16px;margin-top:2.5pt'>"+Information+"</p>"
        +"<img style = height:9.18px; width:9.7053px; margin-left:9.8258px; margin-top:8.054px;' class = 'goodl'src ='"+ icon+"'/>"+ "</div>"
        + "<text class = 'assitedl'><I>"+ assit(assisted)+"</I></text>"+"<p class='uvl'>("+UV+" uv)</p></div>" ;
      }
      else
      {
        s1 = "<div style='display:inline-flex'; margin-left:4.9129px>"
        +"<img style = 'height:9.18px; width:9.7053px; margin-left:6.12px; margin-top:8.054px;' class = 'good'src ='"+ icon+"'/>"+
        "<p class = 'gluteus' style = 'color :"+ colr +";font-size: 8.16px;;margin-top:2.5pt'>"+Information+"</p>"
        + "</div>"
        +"<p class='uv'>("+UV+" uv)</p>" + "<text class = 'assited'><I>"+ assit(assisted)+"</I></text>";
      }
     
      const el = document.createElement('div');
      el.innerHTML =s1;
      if(dir == "Left")el.classList.add('infol');
      else el.classList.add('info');
      
      const box = document.querySelector(ID); 
      box.appendChild(el);
  
      // const box1 = document.querySelector('#box1'); 
      // box1.style.bottom = shift[count];
      // const box2 = document.querySelector('#box2'); 
      // box2.style.bottom = shift[count];
      
      // const box2 = document.querySelector('.fit');
      // var s = 750 - count*10;
      // box2.style.top = s+'px';
  }
  
  icon = '/icons/icons/Fair.png';
  Information = 'Gluteus Maximus';
  ID = '.b1';
  UV = 209;
  
  // addOuterLine(ID, icon, Information, UV);
  // addOuterLine(ID, 'icons/Good.png', Information, UV);
  // // addOuterLine(ID, icon, Information, UV);
  
  // addOuterLine(ID, 'icons/Needs Attention.png', Information, UV);
  
  // addOuterLine(ID, icon, Information, UV);
  // addOuterLine_Head('.b1', 'Hip');
  // addOuterLine('.b1', icon, Information, UV);
  // addOuterLine('.b1', icon, Information, UV);
  
  // addOuterLine_Head('.b2', 'Hip');
  // addOuterLine('.b2', icon, Information, UV);
  // addOuterLine('.b2', icon, Information, UV);
  
  // addOuterLine_Head('.b2', 'Hip');
  // addOuterLine('.b2', icon, Information, UV);
  // addOuterLine('.b2', 'icons/Needs Attention.png', Information, UV);
  // addOuterLine(ID, icon, Information, UV);
  // addOuterLine(ID, icon, Information, UV);
  // addOuterLine(ID, icon, Information, UV);
  
  // page Spliting
  
  function secondPage(injured, gender)
  {

      var pagem = document.querySelector(".secondPage");
      pagem.classList.add('page2');
      var page = document.createElement("div");
          page.classList.add("subpage2");
  
          var image = document.createElement("img");
          image.src = secondPageImage;
          image.classList.add('p2fit');
          image.style.width = ws2;
          image.style.height = hs2;
          page.appendChild(image);
          page.setAttribute('id', 'page2');
          pagem.appendChild(page);
          // document.body.appendChild(pagem);

          // var mpage2 = document.querySelector("#shaip2");
          // var mpage3 = document.querySelector("#mpage3");
          // mpage2.style.position = 'relative';
          // mpage3.style.position = 'relative';
          // mpage2.style.top = '1200px';
          // mpage3.style.top = '100px';
          // mpage2.style.backgroundColor= '#ffffff'



          var dotposition = [];

          if(gender == 'female')dotposition= [['0px', '0px'], ['267.8235pt', '158.941pt'], ['311.70pt', '158.941pt'], ['257.588pt', '204.70588pt'], ['325.2588pt', '204.70588'], ['248.0588pt', '230.823pt'], ['317.0645pt', '230.823pt'], ['281.47pt', '213.3529pt'], ['300.694pt', '213.3529pt'], ['268.0588pt', '239.47pt'], ['296.10pt', '239.47pt'], ['272.3pt', '310.47pt'], ['291.329pt', '310.47pt'], ['275.8823pt', '363.88pt'], ['290.28pt', '363.88pt']];
          else dotposition= [['0px', '0px'], ['267.8235pt', '156.941pt'], ['313.70pt', '156.941'], ['255.588pt', '204.70588pt'], ['328.2588pt', '204.70588pt'], ['250.0588pt', '238.823pt'], ['337.7645pt', '238.823pt'], ['281.47pt', '218.3529pt'], ['300.694pt', '218.3529pt'], ['278.0588pt', '252.47pt'], ['309.10pt', '252.47pt'], ['281.811pt', '310.47pt'], ['304.329pt', '310.47pt'], ['285.88235pt', '365.88pt'], ['302.28pt', '365.88pt']];
          for(var i =1;i<=14;i++)
          {
              var s1 = 'p2d'+i;
              var d1 = document.createElement("div");
              d1.classList.add('dot');
              d1.classList.add(s1);
              // d1.setAttribute('id', s1);
              var d1i = document.createElement("div");
              d1i.classList.add('abc');
              d1.appendChild(d1i);
              page.appendChild(d1);
              s1 = '.p2d' + i;
             
              var id = document.querySelector(s1);
              id.style.left = dotposition[i][0];
              id.style.top = dotposition[i][1];
              id.style.visibility = 'hidden';
              if(injured == "Left" && i%2==1)
              {
                d1.style.background ='#DBF5D6';
                d1i.style.background ='#92E184';
              }
              else if(injured == 'Right' && i%2 == 0)
              {
                d1.style.background ='#DBF5D6';
                d1i.style.background ='#92E184';
              }
              else if(injured == 'Empty' || injured == '')
              {
                d1.style.background ='#DBF5D6';
                d1i.style.background ='#92E184';
              }
          }

          var dls = document.createElement('text');
              dls.innerHTML = "<p class = 'belowright' style = 'position:absolute; bottom:301pt;left:157pt; font-size:10.2px;'>Right Side ("+rightb(injured)+")</p>"+
                "<p class = 'belowleft' style = 'position:absolute; bottom:301pt;right:177.4pt;font-size:10.2px;'>Left Side ("+leftb(injured)+")</p>";
                page.appendChild(dls);
          // line for page two
          for(var i = 1;i <=20;i++)
          {
              var s1 = 'p2line'+i+ 'a';
              var d1 = document.createElement("div");
              d1.classList.add('line');
              // d1.classList.add(s1);
              d1.setAttribute('id', s1);
              page.appendChild(d1);
              var s2 = 'p2line'+i+ 'b';
              var d2 = document.createElement("div");
              d2.classList.add('line');
              // d1.classList.add(s1);
              d2.setAttribute('id', s2);
              // <div class = "belowright" style = "position:absolute; bottom:48pt;left:230pt;">Right Side (Affected Side)</div>
              // <div class = "belowleft" style = "position:absolute; bottom:48pt;right:260pt;">Left Side (Affected Side)</div>
             
              page.appendChild(d2);
              
              // page.appendChild(dls2);
          }
          
          // creating inner boxes on page 2
  
          for(var i = 1; i<=14; i++)
          {
              var s1 = 'p2box'+i;
              var d1 = document.createElement("div");
              var s11 = 'p2box-position'+i;
              d1.classList.add(s11);
              d1.setAttribute('id', s1);
              d1.classList.add('box');
              var d1i = document.createElement("div");
              d1i.classList.add('innerbox1');
              s11 = 'p2box'+i+'a';
              d1i.classList.add(s11);
              var s1i = s11 +'i';
              var d1i1 = document.createElement("div");
              d1i1.classList.add(s1i);
              if(i%2==1)d1i1.classList.add('left');
              else d1i1.classList.add('right');
              
              d1i.appendChild(d1i1);
              d1.appendChild(d1i);
              var d2i = document.createElement("div");
              if(i%2 == 1)d2i.classList.add('innerbox2r');
              else d2i.classList.add('innerbox2l');
              
              var sb = 'p2box'+i+'b';
              d2i.classList.add(sb);
              d2i.style.visibility = "visible";
              d1.appendChild(d2i);
              page.appendChild(d1);
              s1 = '#'+s1;
              // var db1 = document.querySelector(s1);
              
          }
          
          // const el1 = document.createElement('text');
          //     el1.innerHTML ="<br>" + "<b>" +"0째-18째" +"</b>" +" "+ "Adduction";
  
          //     const box1 = document.querySelector('.p2box1a'); // Use querySelector instead of getElementByClass
          //     box1.appendChild(el1);
  
      // implementing side Bar for second page
              var s1 = 'p2obox1';
              var d1 = document.createElement("div");
              d1.classList.add('p2boxr');
              // d1.setAttribute('id', s1);
              var hm1 = "<div class='muscles'>"+
              "<h4 style='text-align: center;font-size: 10.2px;'><b style='padding-right: 2.729pt;'>Muscles</b>(Right Side)</h4>"+
          "</div>"+
          "<div class = 'p2b1' style = 'position:relative;right:10px;'>" + "</div>";

           
          d1.innerHTML = hm1;
          page.appendChild(d1);
          
  
          var s2 = 'p2obox2';
              var d2 = document.createElement("div");
              d2.classList.add('p2boxl');
              // d2.setAttribute('id', s2);
              // d2.style.float = "right";
              var hm2 = "<div class='musclesl'>"+
              "<h4 style='text-align: center;font-size: 10.2px; padding-right:5px;'>(Left Side)<b style='padding-left: 2.047pt;'>Muscles</b></h4>"+
          "</div>"+
          "<div class = 'p2b2'>" + "</div>";
          d2.innerHTML = hm2;
          page.appendChild(d2);
  
  }
  
  // secondPage();
  
  //         addtext('.p2box1a', "0째-18째", "Abduction");
  //         addtext('.p2box1a', "0째-18째", "Adduction");
  //         addImage('.p2box1a', 'icons/ROM Icon.png');
  //         addlower('.p2box1b', dir, firstImg, firsttext, secondImg, secondtext); 
  // icon

  // Normative reps

  function nreps(joint, exe)
{
    if(exe == 'Isometric')
    {
      return -1;
    }
    if(joint == "Shoulder")
    {
        if(exe == 'Flexion') return (9.0/90.0);
        else if(exe == 'Extension') return (13.0/90.0);
        else if(exe == 'Adduction' || exe == 'Abduction') return (12.0/90.0)
    }
    else if(joint == "Wrist")
    {
        if(exe == 'Flexion') return (16.0/90.0);
        else if(exe == 'Extension') return (17.0/90.0);
    }
    else if(joint == "Elbow" || joint == "Elbow")
    {
        if(exe == 'Flexion') return (14.0/90.0);
        else if(exe == 'Extension') return (14.0/90.0);
        else if(exe == 'Supination') return (15.0/90.0);
        else if(exe == 'Pronation') return (14.0/90.0);
    }
    else if(joint == "Hip")
    {
        if(exe == 'Flexion') return (14.0/90.0);
        else if(exe == 'Extension') return (12.0/90.0);
        else if(exe == 'Adduction')return (13.0/90.0);
        else if(exe == 'Abduction') return -1;
    }
    else if(joint == "Knee")
    {
        if(exe == 'Flexion') return (16.0/90.0);
        else if(exe == 'Extension') return (16.0/90.0);
    }
    else if(joint == "Ankle")
    {
        if(exe == 'Plantar flexion') return (18.0/90.0);
        else if(exe == 'Dorsi flexion') return (18.0/90.0);
        else if(exe == 'Inversion')return (15.0/90.0);
        else if(exe == 'Eversion')return (17.0/90.0);
    }
    else
    {
        if(exe == 'Flexion')return (11.0/90.0);
        else if(exe == 'Extension')return (12.0/90.0);
        else if(exe == 'Lateral Flexion' )return (11.0/90.0);
        else if(exe == 'Rotation')return -1;
    }
}

function is_poor(data1, data2)
{
  if(data1 < data2)return 1;
  return 0;
}

// Normative ROM

function nRom(joint, exe)
{
    if(joint == "Shoulder")
    {
        if(exe == 'Flexion') return 180;
        else if(exe == 'Extension') return 45;
        else if(exe == 'Adduction' ) return 180;
        else if(exe == 'Abduction') return 180;
        else if(exe == 'Horizontal adduction')return 45;
    }
    else if(joint == "Wrist")
    {
        if(exe == 'Flexion') return 80;
        else if(exe == 'Extension') return 70;
    }
    else if(joint == "Elbow" || joint == "Elbow")
    {
        if(exe == 'Flexion') return 145;
        else if(exe == 'Extension') return 145;
        else if(exe == 'Supination') return 90;
        else if(exe == 'Pronation') return 90;
    }
    else if(joint == "Hip")
    {
        if(exe == 'Flexion') return 125;
        else if(exe == 'Extension') return 10;
        else if(exe == 'Adduction')return 10;
        else if(exe == 'Horizontal Adduction') return 55;
    }
    else if(joint == "Knee")
    {
        if(exe == 'Flexion') return 140;
        else if(exe == 'Extension') return 140;
    }
    else if(joint == "Ankle")
    {
        if(exe == 'Plantar flexion') return 45;
        else if(exe == 'Dorsi flexion') return 20;
        else if(exe == 'Inversion')return 40;
        else if(exe == 'Eversion')return 20;
    }
    else
    {
        if(exe == 'Flexion')return 75;
        else if(exe == 'Extension')return 30;
        else if(exe == 'Lateral Flexion' )return 35;
        else if(exe == 'Rotation')return 30;
    }

    return 1;
}

function percent(data1, data2)
{
  return (data1/data2)*100;
}
function icon1(data, iconNumber)
{
    if(iconNumber ==1)
    {
        if(data == -1000) return '/icons/icons/blank.jfif';
        else if(data <= 25)return '/icons/icons/Needs Attention.png';
        else if(data <=50)return '/icons/icons/Fair.png';
        else if(data <= 75)return '/icons/icons/Good.png';
        else return '/icons/icons/Excellent.png';
    }
    else if(iconNumber == 2)
    {
        if(data <= 33)return '/icons/icons/ROM Red.png';
        else if(data <= 66)return '/icons/icons/ROM Yellow.png';
        else return '/icons/icons/ROM Green.png';
    }
    else if(iconNumber == 3)
    {
        if(data == 1000)return '/icons/icons/EMG icon Black.png';
        if(data <= 25)return '/icons/icons/EMG icon Red.png';
        else if(data <=50)return '/icons/icons/EMG icon Yellow.png';
        else return '/icons/icons/EMG icon Green.png';
    }
}
  
  function lowerinnerdata(data)
  {
      return "Excellent";
  }
  
  function data1(d1, d2)
  {
      var s1 = d1 +'째-'+d2+'째';
      return s1;
  }
  
  

  
  
  function line_Visible(id1, id2)
  {
      var d1 = document.querySelector(id1);
      // d1.style.visibility = 'visible';
      var d2 = document.querySelector(id2);
      // d2.style.visibility = 'visible';
  }
  
  function lower_data(data1, data2)
  {
    
      var d = ['', '', '', '']
  
      if(data1 <= 25)
      {
          d[2] = "/icons/icons/EMG icon Red.png";
          d[1] = "Poor";
          d[0] = "/icons/icons/Poor Endurance Icon Red.png";
          d[3] = data2;
      }
      else if(data1 <= 50)
      {
          d[2] = "/icons/icons/EMG icon Yellow.png";
          d[1] = "Fair";
          d[0] = "-1";
          d[3] = data2;
      }
      else if(data1 <= 50)
      {
        d[2] = "/icons/icons/EMG icon Green.png";
          d[1] = "Good";
          d[0] = "-1";
          d[3] = data2;
      }
      else
      {
          d[2] = "/icons/icons/EMG icon Green.png";
          d[1] = "Excellent";
          d[0] = "-1";
          d[3] = data2;
      }
  }
  
  let kranthi1_mapP1 = 0;
  let kranthi2_mapP1 = 0;
  function joint(joint1)
  {
      if(joint1 == 'Shoulder' || joint1 == 'Wrist' || joint1 == 'Knee' || joint1 == 'Hip' || joint1 == 'Ankle')return joint1;
      else if(joint1 == 'Neck')return 'Shoulder';
      else if(joint1 == 'Forearm') {
        kranthi1_mapP1 = 2;
        return 'Elbow'
      }
      else if(joint1 == 'Elbow') {
        kranthi2_mapP1 = 1;
        return 'Elbow'
      }
      else return 'Trunk';
  }

      
  function jointNum(joint1, dir)
  {
      if(joint1 == 'Shoulder')
      {
        if(dir == "Right")return 1;
        else return 2;
      }
      else if(joint1 == 'Elbow')
      {
        if(dir == "Right")return 3;
        else return 4;
      }
      else if(joint1 == 'Trunk')
      {
        if(dir == "Right")return 5;
        else return 6;
      }
      else if(joint1 == 'Wrist')
      {
        if(dir == "Right")return 7;
        else return 8;
      }
      else if(joint1 == 'Hip')
      {
        if(dir == "Right")return 9;
        else return 10;
      }
      else if(joint1 == 'Knee')
      {
        if(dir == "Right")return 11;
        else return 12;
      }
      else
      {
        if(dir == "Right")return 13;
        else return 14;
      }
  }

  function firstImg(data)
  {
    // console.log("PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP",data);
      if(data<=25)return '/icons/icons/Poor Endurance Icon Red.png';
      // else if(data <= 50)return '/icons/icons/Fair.png';
      // else if(data <= 75)return '/icons/icons/Good.png';
      // else return '/icons/icons/Excellent.png';
      else return '-1';
  }

  function firsttext(data, data1, data2)
  {
      if(data == 1000)return '-';
      if(data <=25)return "<text style = 'color:#CC2016;'>"+ data2+" of "+data1+" Poor </text>" ;
      else if(data <= 50)return "<text style = 'color:#E6A000;'> Fair </text>" ;
      else if(data <= 75)return "<text style = 'color:#44C02F;'> Good </text>" ;
      else return "<text style = 'color:#44C02F;'> Excellent </text>" ;
  }

  function secondtext(joint1, dir, data_Kranthi)
  {
      if(joint1 == 'Trunk'||joint1 == 'Wrist' || joint1 == 'Knee' || joint1 == 'Hip' || joint1 == 'Ankle')return joint1;
      else if(joint1 == 'Shoulder')
      {
        if(dir == 'Left')return 'Shoulder<br>& Neck';
        else return 'Shoulder<br>&nbsp;& Neck';
      }
      else if(joint1 == 'Elbow')
      {
        if(data_Kranthi == 1){
          return 'Elbow';
        }else if(data_Kranthi == 2){
          return 'Forarm';
        }
        if(dir == 'Left')return 'Forearm <br>& Elbow';
        else return 'Forearm<br>&nbsp;& Elbow';
      }
  }

  // addtext('.box2a', "0째-18째", "Abduction");
  // //   addtext('.box2a', "0째-18째", "Adduction");
  // addImage('.box2a', "icons/ROM Red.png");
  // addlower('.box2b ', 'right', firstImg(18), firsttext(18), 'icons/Poor Endurance Icon.png', 'Shoulder');
function rightb(effected)
{
  if(effected == 'Right' || effected == 'Bi-Lateral')return 'Affected Side';
  else return 'Healthy Side';
}

function leftb(effected)
{
  if(effected == 'Left' || effected == 'Bi-Lateral')return 'Affected Side';
  else return 'Healthy Side';
}
 
  function movement(arr3)
  {
      var i =0, j =0;
      var arr = [];

      // arr3.sort();

     
      while(i<arr3.length)
      {
        // if(arr1[])
        
          var arr1 = [0,'', '',0, '',1000, -1];
          arr1[4]= joint(arr3[i][0]);
          arr1[0] = jointNum(joint(arr3[i][0]), arr3[i][2]);
          arr1[1]=arr3[i][2];
          arr1[2]=arr3[i][1];
          arr1[3]=Math.abs(arr3[i][4] - arr3[i][7]);
          arr1[6] = percent(Math.abs(arr3[i][4] - arr3[i][7]), nRom(arr3[i][0], arr3[i][1]));
          if(arr3[i][2] == 'Isometric')
          {
            arr1[5]=1000;
            i++;
          }
          else
          {
            while(j<arr3.length && arr1[4] == joint(arr3[j][0]) && arr1[1] == arr3[j][2] &&  arr1[2]==arr3[j][1])
            {
                if(arr3[i][2] != 'Isometric')
                {
                  if(arr1[3]<Math.abs(arr3[j][4] - arr3[j][7]))arr1[3]=Math.abs(arr3[j][4] - arr3[j][7]);
                  if(arr1[6]<percent(Math.abs(arr3[j][4] - arr3[j][7]), nRom(arr3[j][0], arr3[j][1])))arr1[6]=percent(Math.abs(arr3[j][4] - arr3[j][7]), nRom(arr3[j][0], arr3[j][1]));
                }
                // if(arr5[j][4])
                j++;
            }
          if(i!=j)i=j;
          else i++;
          }

          arr.push(arr1);
          
      }

      i=0,j=0;
      arr =arr.sort(function(a, b) { return a[0] - b[0]; });

      // console.log('mv', arr);

      while(i<arr.length)
      {
          if(arr[i][5]!= 'Isometric')
          {
            var num=arr[i][6];
          
            while(j<arr.length && arr[i][4] == arr[j][4] && arr[i][1] == arr[j][1])
            {
                if(arr[j][6]<num && arr[j][5] != 'Isometric')num=arr[j][6];
                j++;
            }
            var k =i;

            while(k<j)
            {
              if(arr[i][2] != 'Isometric')
              {
                arr[k][5]=num;
              }
                
                k++;
            }
            if(i !=j)i=j;
            else i++;
          }
          else i++;
          
      }
      var a1 =arr.sort(function(a, b) { return a[0] - b[0]; });
      return a1;
  }

  function jointNum1(joint1)
  {
      if(joint1 == 'Shoulder')return 1;
      else if(joint1 == 'Neck')return 2;
      else if(joint1 == 'Elbow')return 3;
      else if(joint1 == 'Forarm')return 4;
      else if(joint1 == 'Wrist')return 5;
      else if(joint1 == 'Hip')return 6;
      else if(joint1 == 'Knee')return 7;
      else if(joint1 == 'Ankle')return 8;
      else return 4;
  }

  // adding normative emg column
  function add_normative_emg(arr3)
  {
    var n_emg = {};
    // # Shoulder
n_emg["ShoulderFlexionDeltoid"] = 600;
n_emg["ShoulderFlexionCoracobrachialis"] = 689;
n_emg["ShoulderFlexionTrapezius"] = 834;
n_emg["ShoulderExtensionLatissimus Dorsi"] = 140;
n_emg["ShoulderExtensionTrapezius"] = 834;
n_emg["ShoulderAbductionDeltoid"] = 708;
n_emg["ShoulderAbductionInfraspinatus"] = 308;
n_emg["ShoulderAbductionSupraspinatus"] = 366.5;
n_emg["ShoulderAbductionSubscapularis"] = 500;
n_emg["ShoulderAdductionPectoralis Major"] = 195;
n_emg["ShoulderAdductionTeres Minor"] = 228;
;

// # Elbow
n_emg["ElbowFlexionBiceps"] = 499;
n_emg["ElbowFlexionTricep"] = 148;
n_emg["ElbowFlexionBrachialis (Deep)"] = 482;
n_emg["ElbowFlexionBrachioradialis"] = 116;
n_emg["ElbowExtensionBiceps"] = 236;
n_emg["ElbowExtensionTricep"] = 148;
n_emg["ElbowExtensionBrachialis (Deep)"] = 482;
n_emg["ElbowExtensionBrachioradialis"] = 116;
n_emg["ElbowIsometricBiceps"] = 562;
n_emg["ElbowIsometricBrachialis (Deep)"] = 345;
n_emg["ElbowIsometricBrachioradialis"] = 545;
n_emg["ElbowIsometricTricep"] = 417;
n_emg["ElbowIsometricAnconeus"] = 217;

// # Wrist
n_emg["WristFlexionFlexor Carpi Radialis"] = 93;
n_emg["WristExtensionExtensor Digitorum"] = 303;
n_emg["WristIsometricFlexor Carpi Radialis"] = 417;
n_emg["WristIsometricPalmaris Longus"] = 438;
n_emg["WristIsometricFlexor Carpi Ulnaris"] = 507;
n_emg["WristIsometricFlexor Pollicis Longus (Deep)"] = 338;
n_emg["WristIsometricFlexor Digitorum Superficialis (Intermediate)"] = 602;
n_emg["WristIsometricFlexor Digitorum Profundus (Deep)"] = 417;
n_emg["WristIsometricExtensor Carpi Radialis Longus"] = 648;
n_emg["WristIsometricExtensor Carpi Radialis Brevis"] = 577;
n_emg["WristIsometricExtensor Digitorum"] = 599;
n_emg["WristIsometricExtensor Carpi Ulnaris"] = 524;
n_emg["WristIsometricExtensor Digiti Minimi"] = 509;

// # Forearm
n_emg["ForearmSupinationSupinator (Deep)"] = 60;
n_emg["ForearmPronationPronator Quadratus (Deep)"] = 96;

// # Hip
n_emg["HipFlexionTensor Fasciae Latae"] = 266;
n_emg["HipFlexionQuadratus femoris"] = 276;
n_emg["HipFlexionRectus Femoris"] = 276;
n_emg["HipExtensionGluteus Maximus"] = 134;
n_emg["HipExtensionSemimembranosus"] = 629;
n_emg["HipExtensionBiceps femoris"] = 161;
n_emg["HipAbductionGluteus Medius"] = 97;
n_emg["HipAbductionBiceps Femoris"] = 125;
n_emg["HipAbductionAdductor Longus"] = 90;
n_emg["HipAdductionAdductor Magnus"] = 90;

// # Knee
n_emg["KneeFlexionGastrocnemius"] = 141;
n_emg["KneeFlexionRectus Femoris"] = 100;
n_emg["KneeFlexionBiceps Femoris"] = 126;
n_emg["KneeFlexionVastus Lateralis"] = 205;
n_emg["KneeFlexionVastus Medialis"] = 185;
n_emg["KneeFlexionSemitendinosus"] = 250;
n_emg["KneeFlexionSemimembranosus"] = 341;
n_emg["KneeFlexionSartorius"] = 255;
n_emg["KneeFlexionpopliteus"] = 411;
n_emg["KneeExtensionRectus Femoris"] = 100;
n_emg["KneeExtensionBiceps Femoris"] = 126;
n_emg["KneeExtensionGastrocnemius"] = 141;
n_emg["KneeExtensionVastus Lateralis"] = 205;
n_emg["KneeExtensionVastus Medialis"] = 185;
n_emg["KneeExtensionVastus Intermedius"] = 305;
n_emg["KneeExtensionSartorius"] = 255;
n_emg["KneeExtensionpopliteus"] = 411;


// # Ankle
n_emg["AnklePlantarflexionSoleus"] = 70;
n_emg["AnklePlantarflexionGastrocnemius"] = 307;
n_emg["AnkleDorsiflexionTibialis Anterior"] = 272;
n_emg["AnkleInversionTibialis Anterior"] = 111;
n_emg["AnkleEversionPeroneus Longus"] = 158;


// # Thoracic
n_emg["ThoracicFlexionSpinalis Thoracis"] = 76;
n_emg["ThoracicExtensionSpinalis Thoracis"] = 62;
n_emg["ThoracicExtensionlongisimuss thoracic"] = 264;
n_emg["ThoracicLateral FlexionSpinalis Thoracis"] = 54;
n_emg["ThoracicRotationSpinalis Thoracis"] = 94;

// # Lumbar
n_emg["LumbarFlexionRectus Abdominis"] = 127;
n_emg["LumbarExtensionQuadratus Lumborum"] = 63;
n_emg["LumbarExtensionIliocostalis Lumborum"] = 309;
n_emg["LumbarExtensionExternal Oblique"] = 307;
n_emg["LumbarLateral FlexionPsoas Major"] = 48;
n_emg["LumbarLateral FlexionQuadratus Lumborum"] = 67;
n_emg["LumbarRotationMultifidus"] = 51;



// # Abdomen
n_emg["AbdomenFlexionRectus Abdominis"] = 84;
n_emg["AbdomenLateral FlexionRectus Abdominis"] = 73;
n_emg["AbdomenRotationExternal Oblique"] = 72;
n_emg["AbdomenRotationInternal Oblique"] = 418;
//   n_emg["ShoulderFlexionDeltoid"]                          =600.5757576;
// n_emg["ShoulderExtensionLatissimus Dorsi"]            =140.5333333;
// n_emg["ShoulderAbductionDeltoid"]                       =708.6666667;
// n_emg["ShoulderAdductionPectoralis Major"]            =195.1212121;
// n_emg["ElbowFlexionBiceps"]                               =236.025641;
// n_emg["ElbowFlexionTricep"]                               =148;
// n_emg["ElbowExtensionTriceps"]                           = 148.8333333;
// n_emg["ElbowExtensionBiceps"]                           = 236.8333333;
// n_emg["WristFlexionFlexor Carpi Radialis"]            =93.34285714;
// n_emg["WristExtensionExtensor Digitrum"]               =303.1025641;
// n_emg["ForearmSupinationSupinator"]                     =59.97435897;
// n_emg["ForearmPronationPronatorQuadratus"]            =95.97222222;
// n_emg["HipFlexionTensor Fasciae Latae"]                =266;
// n_emg["HipFlexionQuadratus femoris"]                =276;
// n_emg["HipExtensionGluteus Maximus"]                    =134.5;
// n_emg["HipExtensionSemimembranosus"]                    =629;  
// n_emg["HipExtensionBiceps femoris"]                    =161; 
// n_emg["HipAbductionGluteus Medius"]                     =97.75;
// n_emg["HipAbductionBiceps Femoris"]                     =125;
// n_emg["HipAbductionAdductor Longus"]                     =90;
// n_emg["HipAdductionAdductor Magnus"]                    =90.25925926;  
// n_emg["KneeFlexionGastrocnemius"]                       =141.6222222;
// n_emg["KneeFlexionRectus Femoris"]                       =100;
// n_emg["KneeFlexionVastus Lateralis"]                       =205;
// n_emg["KneeFlexionVastus Medialis"]                       =185;
// n_emg["KneeFlexionSartorius"]                       =255; 
// n_emg["KneeExtensionpopliteus"]                       =411;     
// n_emg["KneeExtensionGastrocnemius"]                       =141.6222222;
// n_emg["KneeExtensionRectus Femoris"]                       =100;
// n_emg["KneeExtensionVastus Lateralis"]                       =205;
// n_emg["KneeExtensionVastus Medialis"]                       =185;
// n_emg["KneeExtensionSartorius"]                       =255;     
// n_emg["KneeExtensionpopliteus"]                       =411; 
// n_emg["AnklePlantarFlexion	Soleus"]                    =69.97619048;
// n_emg["AnkleDorsi FlexionTibialis Anterior"]          =271.7333333;
// n_emg["AnkleInversionTibialis Anterior"]               =111.4615385;
// n_emg["AnkleEversionPeroneus Longus"]                  =158.1666667;    
// n_emg["ThoracicFlexionSpinalis Thoracis"]             =76.16666667;
// n_emg["ThoracicExtensionSpinalis Thoracis"]           =61.90909091;
// n_emg["ThoracicLateral FlexionSpinalis Thoracis"]   =54.55555556;
// n_emg["ThoracicRotationSpinalis Thoracis"]            =94.23333333;
// n_emg["LumbarFlexionRectus Abdominis"]                 =127.2424242;
// n_emg["LumbarExtension	Quadratus Lumborum"]          =63.51515152;
// n_emg["LumbarLateral FlexionPsoas Major"]             =47.96969697;
// n_emg["LumbarLateral FlexionQuadratus Lumborum"]             =67.96969697;
// n_emg["LumbarLateral FlexionQuadratus Lumborum"]     =66.93939394;    
// n_emg["LumbarRotationMultifidus"]                       =51;
// n_emg["AbdomenFlexionRectus Abdominis"]                =84.46666667;
// n_emg["AbdomenLateral FlexionRectus Abdominis"]      =73.30555556;
// n_emg["AbdomenRotationExternal Oblique"]               =72.39393939; 
    for(var i =0;i<arr3.length;i++)
    {
      var s = arr3[i][0]+arr3[i][3]+arr3[i][1];
      var num = -1000;

      if(n_emg[s]!=null)
      {
        num = (arr3[i][5]/n_emg[s])*100;
      }

      arr3[i].push(num);
    }
    return arr3;
  }

  function muscleDuplication(arr3)
  {
    var i =0, j =0;
      var arr = [];

      var arr2 = []
     
      while(i<arr3.length)
      {
          var arr1 = [0,'', '','', 0,'',0,'P'];
          arr1[4]= joint(arr3[i][0]);
          arr1[0] = jointNum1(arr3[i][0]);
          arr1[1]=arr3[i][0];
          arr1[2]=arr3[i][1];
          arr1[3]=arr3[i][2];
          arr1[4]=arr3[i][5];
          arr1[5]=arr3[i][8];
          arr1[6]=arr3[i][9];
          while(j<arr3.length && arr1[1] == arr3[j][0] && arr1[2] == arr3[j][1] &&  arr1[3]==arr3[j][2])
          {
              if(arr1[4]<arr3[j][5]){arr1[4]=arr3[j][5]; arr1[5]=arr3[i][8];arr1[6]=arr3[j][9];}
              j++;
          }

          
          if(i!=j)i=j;
          else i++;
          arr.push(arr1);
          
      }

      var m1 = {};
      var m2 = {};

      for(var i =0;i<arr.length;i++)
      {
        var s1 = arr[i][1]+arr[i][2];
        m1[s1]=null;
        m2[s2]=null;
      }

      for(var i =0;i<arr.length;i++)
      {
        var s1=[];
        for(var j =0;j<arr[i].length;j++)
        {
          s1.push(arr[i][j]);
        }
        arr2.push(s1);
      }


      for(var i =0;i <arr.length; i++)
      {
        if(arr[i][3] == 'Left')
        {
          var s1 = arr[i][1]+arr[i][2];
          m1[s1]=arr[i];
        }
        else
        {
          var s1 = arr[i][1]+arr[i][2];
          m2[s1]=arr2[i];
        }
      }

      var a2 = [];
      var n =arr.length;
      var m3 = {};

      for(var i =0;i<n;i++)
      {
        var s1 = arr[i][1]+arr[i][2];
        var s2 = arr2[i][1]+arr2[i][2];
        if(m3[s1]==null)
        {
            if(m1[s1]!=null)
            {
              a2.push(m1[s1]);
            }
            else
            {
              
              var aa = m2[s1];
              var sh = [7, 'Knee', 'Rectus Femoris', 'Right', 266, 'Lethargic', -1000, 'A'];
              for(var j =0;j<aa.length;j++)
              {
                sh[j]=aa[j];
              }
              sh[3]='Left';
              sh[7]='A';
              a2.push(sh);
            }


            if(m2[s1]!=null)
            {
              a2.push(m2[s1]);
            }
            else
            {
              var aa = m1[s1];
              var sh = [7, 'Knee', 'Rectus Femoris', 'Right', 266, 'Lethargic', -1000, 'A'];
              for(var j =0;j<aa.length;j++)
              {
                sh[j]=aa[j];
              }
              sh[3]='Right';
              sh[7]='A';
              a2.push(sh);
            }
            m3[s1]=1;
        }
      }

      a2.sort();
      return a2;
  }

  // id mapping
  var mapid ={};
  mapid['Shoulder'] = ['.box1a', '.box1b', '.box2a','.box2b', '.p2box1a','.p2box1b' , '.p2box2a', '.p2box2b', '.dot1', '.dot2', '.p2d1', '.p2d2', '.line1a', '.line1b', '.line2a', '.line2b', '.p2line1a', '.p2line1b', '.p2line2a', '.p2line2b'] 
  mapid['Elbow'] = ['.box3a', '.box3b', '.box4a','.box4b', '.p2box3a','.p2box3b' , '.p2box4a', '.p2box4b', '.dot3', '.dot4', '.p2d3', '.p2d4','.line3a', '.line3b', '.line4a', '.line4b', '.p2line3a', '.p2line3b', '.p2line4a', '.p2line4b'] 
  mapid['Wrist'] = ['.box5a', '.box5b', '.box6a','.box6b', '.p2box5a','.p2box5b' , '.p2box6a', '.p2box6b', '.dot5', '.dot6', '.p2d5', '.p2d6', '.line5a', '.line5b', '.line6a', '.line6b', '.p2line5a', '.p2line5b', '.p2line6a', '.p2line6b'] 
  mapid['Trunk'] = ['.box7a', '.box7b', '.box8a','.box8b', '.p2box7a','.p2box7b' , '.p2box8a', '.p2box8b', '.dot7', '.dot8', '.p2d7', '.p2d8', '.line7a', '.line7b', '.line8a', '.line8b', '.p2line7a', '.p2line7b', '.p2line8a', '.p2line8b'] 
  mapid['Hip'] = ['.box9a', '.box9b', '.box10a','.box10b', '.p2box9a','.p2box9b' , '.p2box10a', '.p2box10b', '.dot9', '.dot10', '.p2d9', '.p2d10', '.line9a', '.line9b', '.line10a', '.line10b', '.p2line9a', '.p2line9b', '.p2line10a', '.p2line10b'] 
  mapid['Knee'] = ['.box11a', '.box11b', '.box12a','.box12b', '.p2box11a','.p2box11b' , '.p2box12a', '.p2box12b', '.dot11', '.dot12', '.p2d11', '.p2d12', '.line11a', '.line11b', '.line12a', '.line12b', '.p2line11a', '.p2line11b', '.p2line12a', '.p2line12b'] 
  mapid['Ankle'] = ['.box13a', '.box13b', '.box14a','.box14b', '.p2box13a','.p2box13b' , '.p2box14a', '.p2box14b', '.dot13', '.dot14', '.p2d13', '.p2d14', '.line13a', '.line13b', '.line14a', '.line14b', '.p2line13a', '.p2line13b', '.p2line14a', '.p2line14b']  
  
  function dot_Visible(id)
  {
      var d = document.querySelector(id);
      d.style.visibility = 'visible';
  }
  // secondPage();
  
  // addtext('.box14a', "0째-18째", "Flexion");
  // addtext('.box14a', "0째-18째", "Extension");
  // addtext('.p2box2a', "0째-18째", "Abduction");
  //   addtext('.box2a', "0째-18째", "Adduction");
  // addImage('.box14a', "icons/ROM Red.png");
  // addlower('.box14b ', dir, firstImg, firsttext, secondImg, secondtext);
  
  // var arr = [['joint'], ['muscle'], ['side'], ['movement'], ['movement data'], ['muscle data'] ];

  function muscleP(id, p)
  {
    var lp = document.querySelector(id);
    var s1 = '';
    s1 = p+'pt';
    lp.style.top= s1;
  }
 

  function report_new_kranthi(arr5, gender, effectedSide)
  {

    var bl = document.querySelector('.belowleft');
    var br = document.querySelector('.belowright');
    bl.innerHTML = 'Left Side(' + leftb(effectedSide)+ ')';
    br.innerHTML = 'Right Side(' + rightb(effectedSide) + ')';
    changeImage(gender, patient_data, effectedSide);
      var split = 0;
      var leftSize =0;
      var rightSize =0;

      var arrs = [];
      var arr = [];
      for(var i =0; i <arr5.length;i++)
      {
       var al1 = ["", "", "","", 0,0,0,0,""]
       var al2 = ["", "", "","", 0,0,0,0,""]
       for(var j =0;j<arr5[i].length;j++)
       {
        al1[j]=arr5[i][j];
        al2[j]=arr5[i][j];
       }
        arrs.push(al1);
        arr.push(al2);
      }

      arr.sort();
      

      // var a1 =arr.sort(function(a, b) { return a[0] - b[0]; });

      // data for poor endurance
      var mapjoint2 = {};
      mapjoint2['Shoulder'] = [0, 0, 0, 0];
      mapjoint2['Forearm'] = [0, 0, 0, 0];
      mapjoint2['Elbow'] = [0, 0, 0, 0];
      mapjoint2['Wrist'] = [0, 0, 0, 0];
      mapjoint2['Trunk'] = [0, 0, 0, 0];
      mapjoint2['Hip'] = [0, 0, 0, 0];
      mapjoint2['Knee'] = [0, 0, 0, 0];
      mapjoint2['Ankle'] = [0, 0, 0, 0];


      

      var arr1 = muscleDuplication(arrs);
      for(var i =0;i<arr1.length;i++)
      {
        if(arr1[i][7] == 'P')
        {
          if(arr1[i][3] == 'Left')
          {
            mapjoint2[joint(arr1[i][1])][0]++;
            if(arr1[i][6] != -1000 && arr1[i][6] <=33)
            {
              mapjoint2[joint(arr1[i][1])][1]++;
            }
          }
          else
          {
            mapjoint2[joint(arr1[i][1])][2]++;
            if(arr1[i][6] != -1000 && arr1[i][6] <=33)
            {
              mapjoint2[joint(arr1[i][1])][3]++;
            }
          }
        }
      }
      for(var i =0;i <arr.length; i++)
      {
        var num = arr[i][1];
        arr[i][1] = arr[i][3];
        arr[i][3] = num;
      }
      arr.sort();
      // console.log('vynk', arr);
      var a = movement(arr);
      // console.log('abc',a);

     
      var mapP1 = {};// idleft, idright, start, page_no, maxsize, maxleft, maxright, idp2left, idp2right, startp2;
      mapP1['Shoulder'] = ['.box-postion1','.box-postion2',70, 0, 0, 0,0,'.p2box-position1','.p2box-position2',58,0, 0];
      mapP1['Elbow'] = ['.box-postion3','.box-postion4',140, 0, 0, 0,0,'.p2box-position3','.p2box-position4',135,0, 0];
      mapP1['Trunk'] = ['.box-postion7','.box-postion8',180, 0, 0, 0,0,'.p2box-position7','.p2box-position8',150.11,0, 0];
      mapP1['Wrist'] = ['.box-postion5','.box-postion6',240, 0, 0, 0,0,'.p2box-position5','.p2box-position6',150.7,0, 0];
      mapP1['Hip'] = ['.box-postion9','.box-postion10',240, 0, 0, 0,0,'.p2box-position9','.p2box-position10',180,0, 0];
      mapP1['Knee'] = ['.box-postion11','.box-postion12',240, 0, 0, 0,0,'.p2box-position11','.p2box-position12',272.94,0, 0];
      mapP1['Ankle'] = ['.box-postion13','.box-postion14',240, 0, 0, 0,0,'.p2box-position13','.p2box-position14',327.529,0, 0];

      var count = 0;
     
      for(var i =0;i<a.length;i++)
      {
        if(mapP1[a[i][4]][11] == 0)
        {
          count++;
          mapP1[a[i][4]][11] =1;
        }
      }

      var pb3 = [110,220,320];

     

      // console.log("count", count);
      

      for(var i =0;i<a.length;i++)
      {
        if(a[i][1] == "Left")mapP1[a[i][4]][5]+=15;
        else  mapP1[a[i][4]][6] +=15;
        if(mapP1[a[i][4]][5] > mapP1[a[i][4]][4])mapP1[a[i][4]][4] = mapP1[a[i][4]][5];
        if(mapP1[a[i][4]][6] > mapP1[a[i][4]][4])mapP1[a[i][4]][4] = mapP1[a[i][4]][6];
      }




      // console.log('mp', mapP1);

      var lsize = 15;

      for(var i =0;i<a.length;i++)
      {
         if(mapP1[a[i][4]][3] == 0)
         {
          if(mapP1[a[i][4]][2] < lsize)mapP1[a[i][4]][2] = lsize;
          else lsize = mapP1[a[i][4]][2];
          lsize = lsize+mapP1[a[i][4]][4]+35;

          if(mapP1[a[i][4]][2]+mapP1[a[i][4]][4]+10 <= 400)mapP1[a[i][4]][3]=1;
          else mapP1[a[i][4]][3]=2;
         }
      }
// Shailab
      if(count >=3)
      {
        var mnp = {};
        var j=0;
        for(var i =0;i<a.length; i++)
        {
            if(mnp[a[i][4]]==null && j<3)
            {
              mnp[a[i][4]]=1;
              mapP1[a[i][4]][2] = pb3[j];
              mapP1[a[i][4]][3] = 1;
              j++;
            }
            else if(mnp[a[i][4]] ==null && j >=3)
            {
              mapP1[a[i][4]][3] = 2;
            }
        }
      }

      // console.log("mm", mapP1);

      lsize = 15;

      for(var i =0;i<a.length;i++)
      {
         if(mapP1[a[i][4]][3]==2 && mapP1[a[i][4]][10]==0)
         {
            if(mapP1[a[i][4]][9] < lsize)mapP1[a[i][4]][9] = lsize;
            else lsize = mapP1[a[i][4]][9];
            mapP1[a[i][4]][10]=1;
            lsize = lsize+mapP1[a[i][4]][4]+28;
         }
      }

      for(var i =0;i<a.length;i++)
      {
         if(mapP1[a[i][4]][3]==2)
         {
          mapP1[a[i][4]][0] = mapP1[a[i][4]][7];
          mapP1[a[i][4]][1] = mapP1[a[i][4]][8]; 
          mapP1[a[i][4]][2] = mapP1[a[i][4]][9];
         }
      }

      for(var i =0;i<a.length;i++)
      {
        // console.log(a[i][4], mapP1[a[i][4]]);
      }

      
     
     
      // addtext('.box1a', "0째-18째", "Flexion");
      var mapjoint = {};
      mapjoint['Shoulder'] = [0, 0, 0, 0];
      mapjoint['Neck'] = [0, 0, 0, 0];
      mapjoint['Forearm'] = [0, 0, 0, 0];
      mapjoint['Elbow'] = [0, 0, 0, 0];
      mapjoint['Wrist'] = [0, 0, 0, 0];
      mapjoint['Thoracic'] = [0, 0, 0, 0];
      mapjoint['Lumbar'] = [0, 0, 0, 0];
      mapjoint['Abdomen'] = [0, 0, 0, 0];
      mapjoint['Hip'] = [0, 0, 0, 0];
      mapjoint['Knee'] = [0, 0, 0, 0];
      mapjoint['Ankle'] = [0, 0, 0, 0];
      
      // ###########################Positioning ####################
  
      // var mapPosition = {};
      // mapPosition['Shoulder'] = ['0px', '0px', '0px', '0px'];
      // mapPosition['Elbow'] = ['0px', '0px', '0px', '0px'];
      // mapPosition['Wrist'] = ['0px', '0px', '0px', '0px'];
      // mapPosition['Truck'] = ['0px', '0px', '0px', '0px'];
      // mapPosition['Hip'] = ['0px', '0px', '0px', '0px'];
      // mapPosition['Knee'] = ['0px', '0px', '0px', '0px'];
      // mapPosition['Ankle'] = ['0px', '0px', '0px', '0px'];
  
      // function positioning(id )
      // {
          
      // }
      //trial start
      
var mapjoint1 = {};
mapjoint1['Shoulder'] = [0, 0, 0, 0];
mapjoint1['Elbow'] = [0, 0, 0, 0];
mapjoint1['Wrist'] = [0, 0, 0, 0];
mapjoint1['Trunk'] = [0, 0, 0, 0];
mapjoint1['Hip'] = [0, 0, 0, 0];
mapjoint1['Knee'] = [0, 0, 0, 0];
mapjoint1['Ankle'] = [0, 0, 0, 0];

var emgP = {};
  emgP['Shoulder'] = [1000, 1000];
  emgP['Forearm'] = [1000, 1000];
  emgP['Elbow'] = [1000, 1000];
  emgP['Wrist'] = [1000, 1000];
  emgP['Trunk'] = [1000, 1000];
  emgP['Hip'] = [1000, 1000];
  emgP['Knee'] = [1000, 1000];
  emgP['Ankle'] = [1000, 1000];

  for(var i =0;i<arr1.length;i++)
  {
    if(arr1[i][6]!=-1000)
    {
      if(arr1[i][3] == 'Left')
      {
        if( arr1[i][6]< emgP[joint(arr1[i][1])][0])emgP[joint(arr1[i][1])][0]=arr1[i][6];
      }
      else
      {
        if( arr1[i][6]< emgP[joint(arr1[i][1])][1])emgP[joint(arr1[i][1])][1]=arr1[i][6];
      }
    }
  }


for(var i =0;i <a.length;i++)
{
  if(a[i][1] == 'Left')
  {
    if(mapP1[a[i][4]][3] ==1)
          {
              dot_Visible(mapid[a[i][4]][9]);
              dot_Visible(mapid[a[i][4]][8]);
              mapjoint1[a[i][4]][0]=1;
              addtext(mapid[a[i][4]][2], a[i][3], a[i][2], 'left', a[i][6]);
              mapP1[a[i][4]][5]-=15;
              if(mapP1[a[i][4]][5] == 0)
              {
                addImage(mapid[a[i][4]][2], icon1(a[i][5], 2), 'left');
                addlower(mapid[a[i][4]][3], 'left', firstImg(a[i][5]), firsttext(emgP[joint(a[i][4])][0], mapjoint2[a[i][4]][0], mapjoint2[a[i][4]][1]), icon1(emgP[joint(a[i][4])][0], 3), secondtext(a[i][4],'Left',kranthi1_mapP1+kranthi2_mapP1));
                line_Visible(mapid[a[i][4]][14], mapid[a[i][4]][15]);
                muscleP(mapP1[a[i][4]][1],mapP1[a[i][4]][2]);
              }
          }
          else
          {
              if(split ==0)
              {
                  split =1;
                  secondPage(effectedSide,gender);
              } 
              dot_Visible(mapid[a[i][4]][11]);
              dot_Visible(mapid[a[i][4]][10]);


              
              if(mapjoint1[a[i][4]][1] == 0)
              {
                  mapjoint1[a[i][4]][1] = 1;
              }
              addtext(mapid[a[i][4]][6], a[i][3], a[i][2], 'left',a[i][6])

              mapP1[a[i][4]][5]-=15;
              if(mapP1[a[i][4]][5] == 0)
              {
                  addImage(mapid[a[i][4]][6], icon1(a[i][5], 2), 'left');
                  addlower(mapid[a[i][4]][7], 'left', firstImg(a[i][5]), firsttext(emgP[joint(a[i][4])][0], mapjoint2[a[i][4]][0], mapjoint2[a[i][4]][1]), icon1(emgP[joint(a[i][4])][0], 3), secondtext(a[i][4],'Left',kranthi1_mapP1+kranthi2_mapP1));
                  line_Visible(mapid[a[i][4]][18], mapid[a[i][4]][19])
                  muscleP(mapP1[a[i][4]][1],mapP1[a[i][4]][2]);
              }
          }
  }
  else  if(a[i][1] == 'Right')
  {
          if(mapP1[a[i][4]][3] ==1)
          {
              dot_Visible(mapid[a[i][4]][8]);
              dot_Visible(mapid[a[i][4]][9]);
              mapjoint1[a[i][4]][2]=1;
              addtext(mapid[a[i][4]][0], a[i][3], a[i][2], 'right',a[i][6])

              mapP1[a[i][4]][6]-=15;
              if(mapP1[a[i][4]][6] == 0)
              {
                addImage(mapid[a[i][4]][0], icon1(a[i][5], 2), 'right');
                  addlower(mapid[a[i][4]][1], 'right', firstImg(a[i][5]), firsttext(emgP[joint(a[i][4])][1], mapjoint2[a[i][4]][2], mapjoint2[a[i][4]][3]), icon1(emgP[joint(a[i][4])][1], 3), secondtext(a[i][4],'Right',kranthi1_mapP1+kranthi2_mapP1));
                  line_Visible(mapid[a[i][4]][12], mapid[a[i][4]][13]);
                  muscleP(mapP1[a[i][4]][0],mapP1[a[i][4]][2]);
              }
          }
          else
          {
              if(split ==0)
              {
                  split =1;
                  secondPage(effectedSide,gender);
              }
              dot_Visible(mapid[a[i][4]][10]);
              dot_Visible(mapid[a[i][4]][11]);

              if(mapjoint1[a[i][4]][3] == 0)
              {
                  mapjoint1[a[i][4]][3] = 1;
              }
              
              addtext(mapid[a[i][4]][4], a[i][3], a[i][2], 'right',a[i][6]);

              mapP1[a[i][4]][6]-=15;
              if(mapP1[a[i][4]][6] == 0)
              {
                addImage(mapid[a[i][4]][4], icon1(a[i][5], 2), 'right');
                  addlower(mapid[a[i][4]][5], 'right', firstImg(a[i][5]), firsttext(emgP[joint(a[i][4])][1], mapjoint2[a[i][4]][2], mapjoint2[a[i][4]][3]), icon1(emgP[joint(a[i][4])][1], 3), secondtext(a[i][4],'Right',kranthi1_mapP1+kranthi2_mapP1));
                  line_Visible(mapid[a[i][4]][16], mapid[a[i][4]][17]);
                  muscleP(mapP1[a[i][4]][0],mapP1[a[i][4]][2]);
              }

          }
  }

}
//Trial end.
    leftSize=0;
    rightSize=0;
  
    
for(var i =0;i <arr1.length;i++)
{
   
    if(arr1[i][3] == 'Left')
    {

        if(mapP1[joint(arr1[i][1])][3] == 2)
        {
          leftSize = 350;
        }
        if(mapjoint[arr1[i][1]][0] == 0)
        {
            
            leftSize += 40;
            if(leftSize<=300)
            {
                mapjoint[arr1[i][1]][0]=1;
                addOuterLine_Head('.b2', arr1[i][1], arr1[i][3]);
                addOuterLine('.b2',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4], arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
            else
            {
                if(split ==0)
                {
                    split =1;
                    secondPage(effectedSide,gender);
                } 
                if(mapjoint[arr1[i][1]][1] == 0)
                {
                    addOuterLine_Head('.p2b2', arr1[i][1],arr1[i][3]);
                    mapjoint[arr1[i][1]][1] = 1;
                }
                
                addOuterLine('.p2b2',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
        }
        else
        {
            leftSize += 20;
            if(leftSize<=300)
            {
                addOuterLine('.b2',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
            else
            {
                if(split ==0)
                {
                    split =1;
                    secondPage(effectedSide,gender);
                }

                if(mapjoint[arr1[i][1]][1] == 0)
                {
                    leftSize+=20;
                    addOuterLine_Head('.p2b2', arr1[i][1],arr1[i][3]);
                    mapjoint[arr1[i][1]][1] = 1;
                }

                addOuterLine('.p2b2',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
        }
    }
    else  if(arr1[i][3] == 'Right')
    {

      if(mapP1[joint(arr1[i][1])][3] == 2)
      {
        rightSize = 350;
      }
        if(mapjoint[arr1[i][1]][2] == 0)
        {
            
            rightSize += 40;
            if(rightSize<=300)
            {
                mapjoint[arr1[i][1]][2]=1;
                addOuterLine_Head('.b1', arr1[i][1],arr1[i][3]);
                addOuterLine('.b1',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
            else
            {
                if(split ==0)
                {
                    split =1;
                    secondPage(effectedSide,gender);
                }
                if(mapjoint[arr1[i][1]][3] == 0)
                {
                    addOuterLine_Head('.p2b1', arr1[i][1],arr1[i][3]);
                    mapjoint[arr1[i][1]][3] = 1;
                }
                
                addOuterLine('.p2b1',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
        }
        else
        {
            rightSize += 20;
            if(rightSize<=300)
            {
                addOuterLine('.b1',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
            else
            {
                if(split ==0)
                {
                    split =1;
                    secondPage(effectedSide,gender);
                }
                if(mapjoint[arr1[i][1]][3] == 0)
                {
                    rightSize+=20;
                    addOuterLine_Head('.p2b1', arr1[i][1],arr1[i][3]);
                    mapjoint[arr1[i][1]][3] = 1;
                }

                addOuterLine('.p2b1',icon1(arr1[i][6],1),arr1[i][2], arr1[i][4],arr1[i][5], arr1[i][6], arr1[i][7],arr1[i][3]);
            }
        }
        }

    } 
    
}
  
  
  
  
  //   addtext('.box5a', "0째-19째", "Flexion");
  // var arr = [['joint'], ['muscle'], ['side'], ['movement'], ['movement data'], ['muscle data'] ];
  
  // var arr5 =
  // [ 

  //   // ['Wrist', 'Gluteus Maximus', 'Right', 'Flexsion', 0, 1595, 5, 60, 'Active', -1000],
  //   // ['Shoulder', 'Gluteus Maximus1', 'Right', 'Abduction5', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus2', 'Right', 'Abduction', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Trunk', 'Gluteus Maximus3', 'Right', 'Abduction3', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus4', 'Right', 'Flexsion', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus4', 'Left', 'Flexsion', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus2', 'Right', 'Abduction', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus3', 'Right', 'Abduction3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus4', 'Right', 'Flexsion', 0, 1595, 5, -34, 'Active', -1000],

  //   ['Shoulder', 'Gluteus Maximus1', 'Left', 'Abduction', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus2', 'Left', 'Abduction3', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus3', 'Left', 'Flexsion', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Shoulder', 'Gluteus Maximus4', 'Left', 'Flexsion', 0, 1595, 5, -34, 'Active', -1000],
    
  //   // ['Knee', 'Gluteus Maximus', 'Right', 'Extension', 0, 1595, 5, 70, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus1', 'Right', 'Abduction1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus4', 'Right', 'Abduction2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus2', 'Right', 'Abduction3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus3', 'Right', 'Abduction4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus1', 'Left', 'Abduction1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus4', 'Left', 'Abduction2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus2', 'Left', 'Abduction3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Elbow', 'Gluteus Maximus3', 'Left', 'Abduction4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Abdomen', 'Gluteus Maximus4', 'Right', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus1', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   // ['Lumbar', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus2', 'Left', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus1', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],


  //   ['Wrist', 'Gluteus Maximus4', 'Right', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Wrist', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Wrist', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Wrist', 'Gluteus Maximus1', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   ['Wrist', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Wrist', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Wrist', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Wrist', 'Gluteus Maximus1', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   // ['Hip', 'Gluteus Maximus4', 'Right', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus1', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],
    
  //   // ['Hip', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus1', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   ['Knee', 'Gluteus Maximus4', 'Right', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Knee', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Knee', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Knee', 'Gluteus Maximus1', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   ['Knee', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   ['Knee', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Knee', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Knee', 'Gluteus Maximus1', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   // ['Ankle', 'Gluteus Maximus4', 'Right', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus1', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],

  //   // ['Ankle', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus5', 'Left', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus1', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Wrist', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Wrist', 'Gluteus Maximus4', 'Left', 'Lateral Flexsion1', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Lumbar', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion2', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Thoracic', 'Gluteus Maximus', 'Right', 'Lateral Flexsion3', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Abdomen', 'Gluteus Maximus', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Hip', 'Gluteus Maximus1', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Knee', 'Gluteus Maximus2', 'Left', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Knee', 'Gluteus Maximus3', 'Right', 'Lateral Flexsion5', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus4', 'Right', 'Lateral Flexsion4', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus5', 'Right', 'Lateral Flexsion5', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus6', 'Right', 'Lateral Flexsion7', 0, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Gluteus Maximus', 'Right', 'Lateral Flexsion8', 0, 1595, 5, -34, 'Active', -1000],


    

  //   // ['Hip', 'Gluteus Maximus', 'Right', 'Abduction', 0, 1595, 5, -34, 'Active', -1000]

  //   // ['Knee', 'Biceps', 'Right', 'Supination', 120, 1595, 5, -34, 'Active', -1000],
  //   // ['Ankle', 'Biceps', 'Right', 'Planter Flexion', 100, 1595, 5, -34, 'Active', -1000]
   
    
  // ]
 
  var s2 = "Knee,Rectus Femoris,Right,Flexion,121,266,Knee,Vastus Medialis,Right,Extension,122,610,Knee,Gastrocnemius,Left,Flexion,124,851,Knee,Vastus Medialis,Left,Extension,124,283,Knee,Biceps Femoris,Left,Extension,111,1587,Knee,Biceps Femoris,Right,Extension,104,286,Hip,Gluteus Maximus,Right,Extension,15,434,Hip,Adductor Longus,Right,Adduction,7,459,Hip,Adductor Longus,Left,Abduction,0,1595,Hip,Gluteus Maximus,Left,Extension,13,25"

  function stringTodata(data)
  {
     
     var i =0;
     var arr = []
     while(i<data.length)
     {
        var arr1 = ["", "", "","", 0,0,0,0,""]
        var s1 = ""
        var count = 0;
          while(count<9 && i<data.length)
          {
              if(data[i]==',')
              {
                if(count< 4 || count == 8)
                {
                  arr1[count] = s1;
                }
                else 
                {
                  arr1[count] = parseInt(s1);
                }
                count++;
                s1 = "";
              }
              else 
              {
                s1 = s1+data[i];
              }

              i++;
          }
          arr.push(arr1);
     }
      return arr;
  }

  var element = document.getElementById("myElement");
  let outputValue = element.value;
  var elementone = document.getElementById("myElementone")
  let outputValueone = elementone.value;
  var elementtwo = document.getElementById("myElementwo")
  let outputValuetwo = elementtwo.value;
  

 
  arr5 = stringTodata(outputValue);

  var arr5 = add_normative_emg(arr5);

 
// outputValueone

report_new_kranthi(arr5, outputValueone, outputValuetwo); 
// secondPage();
// dotp
// dot_Visible(mapid['Trunk'][10]);
  
  </script>  



   </body>
 
</html>

<% } %>
